
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Equipe
 * 
 */
export type Equipe = $Result.DefaultSelection<Prisma.$EquipePayload>
/**
 * Model Jogador
 * 
 */
export type Jogador = $Result.DefaultSelection<Prisma.$JogadorPayload>
/**
 * Model Jogo
 * 
 */
export type Jogo = $Result.DefaultSelection<Prisma.$JogoPayload>
/**
 * Model Gol
 * 
 */
export type Gol = $Result.DefaultSelection<Prisma.$GolPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model LogAdmin
 * 
 */
export type LogAdmin = $Result.DefaultSelection<Prisma.$LogAdminPayload>
/**
 * Model InscricaoEquipe
 * 
 */
export type InscricaoEquipe = $Result.DefaultSelection<Prisma.$InscricaoEquipePayload>
/**
 * Model InscricaoJogador
 * 
 */
export type InscricaoJogador = $Result.DefaultSelection<Prisma.$InscricaoJogadorPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatusJogo: {
  AGENDADO: 'AGENDADO',
  EM_ANDAMENTO: 'EM_ANDAMENTO',
  FINALIZADO: 'FINALIZADO',
  CANCELADO: 'CANCELADO'
};

export type StatusJogo = (typeof StatusJogo)[keyof typeof StatusJogo]


export const StatusInscricao: {
  PENDENTE: 'PENDENTE',
  APROVADA: 'APROVADA',
  REJEITADA: 'REJEITADA'
};

export type StatusInscricao = (typeof StatusInscricao)[keyof typeof StatusInscricao]

}

export type StatusJogo = $Enums.StatusJogo

export const StatusJogo: typeof $Enums.StatusJogo

export type StatusInscricao = $Enums.StatusInscricao

export const StatusInscricao: typeof $Enums.StatusInscricao

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Equipes
 * const equipes = await prisma.equipe.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Equipes
   * const equipes = await prisma.equipe.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.equipe`: Exposes CRUD operations for the **Equipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipes
    * const equipes = await prisma.equipe.findMany()
    * ```
    */
  get equipe(): Prisma.EquipeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jogador`: Exposes CRUD operations for the **Jogador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jogadors
    * const jogadors = await prisma.jogador.findMany()
    * ```
    */
  get jogador(): Prisma.JogadorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jogo`: Exposes CRUD operations for the **Jogo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jogos
    * const jogos = await prisma.jogo.findMany()
    * ```
    */
  get jogo(): Prisma.JogoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gol`: Exposes CRUD operations for the **Gol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gols
    * const gols = await prisma.gol.findMany()
    * ```
    */
  get gol(): Prisma.GolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.logAdmin`: Exposes CRUD operations for the **LogAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogAdmins
    * const logAdmins = await prisma.logAdmin.findMany()
    * ```
    */
  get logAdmin(): Prisma.LogAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inscricaoEquipe`: Exposes CRUD operations for the **InscricaoEquipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InscricaoEquipes
    * const inscricaoEquipes = await prisma.inscricaoEquipe.findMany()
    * ```
    */
  get inscricaoEquipe(): Prisma.InscricaoEquipeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inscricaoJogador`: Exposes CRUD operations for the **InscricaoJogador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InscricaoJogadors
    * const inscricaoJogadors = await prisma.inscricaoJogador.findMany()
    * ```
    */
  get inscricaoJogador(): Prisma.InscricaoJogadorDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Equipe: 'Equipe',
    Jogador: 'Jogador',
    Jogo: 'Jogo',
    Gol: 'Gol',
    Admin: 'Admin',
    LogAdmin: 'LogAdmin',
    InscricaoEquipe: 'InscricaoEquipe',
    InscricaoJogador: 'InscricaoJogador'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "equipe" | "jogador" | "jogo" | "gol" | "admin" | "logAdmin" | "inscricaoEquipe" | "inscricaoJogador"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Equipe: {
        payload: Prisma.$EquipePayload<ExtArgs>
        fields: Prisma.EquipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          findFirst: {
            args: Prisma.EquipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          findMany: {
            args: Prisma.EquipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>[]
          }
          create: {
            args: Prisma.EquipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          createMany: {
            args: Prisma.EquipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>[]
          }
          delete: {
            args: Prisma.EquipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          update: {
            args: Prisma.EquipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          deleteMany: {
            args: Prisma.EquipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>[]
          }
          upsert: {
            args: Prisma.EquipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          aggregate: {
            args: Prisma.EquipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipe>
          }
          groupBy: {
            args: Prisma.EquipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipeCountArgs<ExtArgs>
            result: $Utils.Optional<EquipeCountAggregateOutputType> | number
          }
        }
      }
      Jogador: {
        payload: Prisma.$JogadorPayload<ExtArgs>
        fields: Prisma.JogadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JogadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JogadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>
          }
          findFirst: {
            args: Prisma.JogadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JogadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>
          }
          findMany: {
            args: Prisma.JogadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>[]
          }
          create: {
            args: Prisma.JogadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>
          }
          createMany: {
            args: Prisma.JogadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JogadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>[]
          }
          delete: {
            args: Prisma.JogadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>
          }
          update: {
            args: Prisma.JogadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>
          }
          deleteMany: {
            args: Prisma.JogadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JogadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JogadorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>[]
          }
          upsert: {
            args: Prisma.JogadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogadorPayload>
          }
          aggregate: {
            args: Prisma.JogadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJogador>
          }
          groupBy: {
            args: Prisma.JogadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<JogadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.JogadorCountArgs<ExtArgs>
            result: $Utils.Optional<JogadorCountAggregateOutputType> | number
          }
        }
      }
      Jogo: {
        payload: Prisma.$JogoPayload<ExtArgs>
        fields: Prisma.JogoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JogoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JogoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>
          }
          findFirst: {
            args: Prisma.JogoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JogoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>
          }
          findMany: {
            args: Prisma.JogoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>[]
          }
          create: {
            args: Prisma.JogoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>
          }
          createMany: {
            args: Prisma.JogoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JogoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>[]
          }
          delete: {
            args: Prisma.JogoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>
          }
          update: {
            args: Prisma.JogoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>
          }
          deleteMany: {
            args: Prisma.JogoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JogoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JogoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>[]
          }
          upsert: {
            args: Prisma.JogoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogoPayload>
          }
          aggregate: {
            args: Prisma.JogoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJogo>
          }
          groupBy: {
            args: Prisma.JogoGroupByArgs<ExtArgs>
            result: $Utils.Optional<JogoGroupByOutputType>[]
          }
          count: {
            args: Prisma.JogoCountArgs<ExtArgs>
            result: $Utils.Optional<JogoCountAggregateOutputType> | number
          }
        }
      }
      Gol: {
        payload: Prisma.$GolPayload<ExtArgs>
        fields: Prisma.GolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>
          }
          findFirst: {
            args: Prisma.GolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>
          }
          findMany: {
            args: Prisma.GolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>[]
          }
          create: {
            args: Prisma.GolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>
          }
          createMany: {
            args: Prisma.GolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>[]
          }
          delete: {
            args: Prisma.GolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>
          }
          update: {
            args: Prisma.GolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>
          }
          deleteMany: {
            args: Prisma.GolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>[]
          }
          upsert: {
            args: Prisma.GolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolPayload>
          }
          aggregate: {
            args: Prisma.GolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGol>
          }
          groupBy: {
            args: Prisma.GolGroupByArgs<ExtArgs>
            result: $Utils.Optional<GolGroupByOutputType>[]
          }
          count: {
            args: Prisma.GolCountArgs<ExtArgs>
            result: $Utils.Optional<GolCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      LogAdmin: {
        payload: Prisma.$LogAdminPayload<ExtArgs>
        fields: Prisma.LogAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>
          }
          findFirst: {
            args: Prisma.LogAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>
          }
          findMany: {
            args: Prisma.LogAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>[]
          }
          create: {
            args: Prisma.LogAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>
          }
          createMany: {
            args: Prisma.LogAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>[]
          }
          delete: {
            args: Prisma.LogAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>
          }
          update: {
            args: Prisma.LogAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>
          }
          deleteMany: {
            args: Prisma.LogAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>[]
          }
          upsert: {
            args: Prisma.LogAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAdminPayload>
          }
          aggregate: {
            args: Prisma.LogAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogAdmin>
          }
          groupBy: {
            args: Prisma.LogAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogAdminCountArgs<ExtArgs>
            result: $Utils.Optional<LogAdminCountAggregateOutputType> | number
          }
        }
      }
      InscricaoEquipe: {
        payload: Prisma.$InscricaoEquipePayload<ExtArgs>
        fields: Prisma.InscricaoEquipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InscricaoEquipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InscricaoEquipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>
          }
          findFirst: {
            args: Prisma.InscricaoEquipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InscricaoEquipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>
          }
          findMany: {
            args: Prisma.InscricaoEquipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>[]
          }
          create: {
            args: Prisma.InscricaoEquipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>
          }
          createMany: {
            args: Prisma.InscricaoEquipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InscricaoEquipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>[]
          }
          delete: {
            args: Prisma.InscricaoEquipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>
          }
          update: {
            args: Prisma.InscricaoEquipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>
          }
          deleteMany: {
            args: Prisma.InscricaoEquipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InscricaoEquipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InscricaoEquipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>[]
          }
          upsert: {
            args: Prisma.InscricaoEquipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoEquipePayload>
          }
          aggregate: {
            args: Prisma.InscricaoEquipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInscricaoEquipe>
          }
          groupBy: {
            args: Prisma.InscricaoEquipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<InscricaoEquipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.InscricaoEquipeCountArgs<ExtArgs>
            result: $Utils.Optional<InscricaoEquipeCountAggregateOutputType> | number
          }
        }
      }
      InscricaoJogador: {
        payload: Prisma.$InscricaoJogadorPayload<ExtArgs>
        fields: Prisma.InscricaoJogadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InscricaoJogadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InscricaoJogadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>
          }
          findFirst: {
            args: Prisma.InscricaoJogadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InscricaoJogadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>
          }
          findMany: {
            args: Prisma.InscricaoJogadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>[]
          }
          create: {
            args: Prisma.InscricaoJogadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>
          }
          createMany: {
            args: Prisma.InscricaoJogadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InscricaoJogadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>[]
          }
          delete: {
            args: Prisma.InscricaoJogadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>
          }
          update: {
            args: Prisma.InscricaoJogadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>
          }
          deleteMany: {
            args: Prisma.InscricaoJogadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InscricaoJogadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InscricaoJogadorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>[]
          }
          upsert: {
            args: Prisma.InscricaoJogadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscricaoJogadorPayload>
          }
          aggregate: {
            args: Prisma.InscricaoJogadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInscricaoJogador>
          }
          groupBy: {
            args: Prisma.InscricaoJogadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<InscricaoJogadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.InscricaoJogadorCountArgs<ExtArgs>
            result: $Utils.Optional<InscricaoJogadorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    equipe?: EquipeOmit
    jogador?: JogadorOmit
    jogo?: JogoOmit
    gol?: GolOmit
    admin?: AdminOmit
    logAdmin?: LogAdminOmit
    inscricaoEquipe?: InscricaoEquipeOmit
    inscricaoJogador?: InscricaoJogadorOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EquipeCountOutputType
   */

  export type EquipeCountOutputType = {
    jogadores: number
    jogosCasa: number
    jogosFora: number
  }

  export type EquipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogadores?: boolean | EquipeCountOutputTypeCountJogadoresArgs
    jogosCasa?: boolean | EquipeCountOutputTypeCountJogosCasaArgs
    jogosFora?: boolean | EquipeCountOutputTypeCountJogosForaArgs
  }

  // Custom InputTypes
  /**
   * EquipeCountOutputType without action
   */
  export type EquipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipeCountOutputType
     */
    select?: EquipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipeCountOutputType without action
   */
  export type EquipeCountOutputTypeCountJogadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JogadorWhereInput
  }

  /**
   * EquipeCountOutputType without action
   */
  export type EquipeCountOutputTypeCountJogosCasaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JogoWhereInput
  }

  /**
   * EquipeCountOutputType without action
   */
  export type EquipeCountOutputTypeCountJogosForaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JogoWhereInput
  }


  /**
   * Count Type JogadorCountOutputType
   */

  export type JogadorCountOutputType = {
    gols: number
  }

  export type JogadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gols?: boolean | JogadorCountOutputTypeCountGolsArgs
  }

  // Custom InputTypes
  /**
   * JogadorCountOutputType without action
   */
  export type JogadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JogadorCountOutputType
     */
    select?: JogadorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JogadorCountOutputType without action
   */
  export type JogadorCountOutputTypeCountGolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GolWhereInput
  }


  /**
   * Count Type JogoCountOutputType
   */

  export type JogoCountOutputType = {
    gols: number
  }

  export type JogoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gols?: boolean | JogoCountOutputTypeCountGolsArgs
  }

  // Custom InputTypes
  /**
   * JogoCountOutputType without action
   */
  export type JogoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JogoCountOutputType
     */
    select?: JogoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JogoCountOutputType without action
   */
  export type JogoCountOutputTypeCountGolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GolWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    LogAdmin: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LogAdmin?: boolean | AdminCountOutputTypeCountLogAdminArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountLogAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogAdminWhereInput
  }


  /**
   * Count Type InscricaoEquipeCountOutputType
   */

  export type InscricaoEquipeCountOutputType = {
    jogadores: number
  }

  export type InscricaoEquipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogadores?: boolean | InscricaoEquipeCountOutputTypeCountJogadoresArgs
  }

  // Custom InputTypes
  /**
   * InscricaoEquipeCountOutputType without action
   */
  export type InscricaoEquipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipeCountOutputType
     */
    select?: InscricaoEquipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InscricaoEquipeCountOutputType without action
   */
  export type InscricaoEquipeCountOutputTypeCountJogadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscricaoJogadorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Equipe
   */

  export type AggregateEquipe = {
    _count: EquipeCountAggregateOutputType | null
    _min: EquipeMinAggregateOutputType | null
    _max: EquipeMaxAggregateOutputType | null
  }

  export type EquipeMinAggregateOutputType = {
    id: string | null
    nome: string | null
    slug: string | null
    contato: string | null
    capitao: string | null
    aceiteRegulamento: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipeMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    slug: string | null
    contato: string | null
    capitao: string | null
    aceiteRegulamento: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipeCountAggregateOutputType = {
    id: number
    nome: number
    slug: number
    contato: number
    capitao: number
    aceiteRegulamento: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EquipeMinAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    contato?: true
    capitao?: true
    aceiteRegulamento?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipeMaxAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    contato?: true
    capitao?: true
    aceiteRegulamento?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipeCountAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    contato?: true
    capitao?: true
    aceiteRegulamento?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EquipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipe to aggregate.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipes
    **/
    _count?: true | EquipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipeMaxAggregateInputType
  }

  export type GetEquipeAggregateType<T extends EquipeAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipe[P]>
      : GetScalarType<T[P], AggregateEquipe[P]>
  }




  export type EquipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipeWhereInput
    orderBy?: EquipeOrderByWithAggregationInput | EquipeOrderByWithAggregationInput[]
    by: EquipeScalarFieldEnum[] | EquipeScalarFieldEnum
    having?: EquipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipeCountAggregateInputType | true
    _min?: EquipeMinAggregateInputType
    _max?: EquipeMaxAggregateInputType
  }

  export type EquipeGroupByOutputType = {
    id: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento: boolean
    createdAt: Date
    updatedAt: Date
    _count: EquipeCountAggregateOutputType | null
    _min: EquipeMinAggregateOutputType | null
    _max: EquipeMaxAggregateOutputType | null
  }

  type GetEquipeGroupByPayload<T extends EquipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipeGroupByOutputType[P]>
            : GetScalarType<T[P], EquipeGroupByOutputType[P]>
        }
      >
    >


  export type EquipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    slug?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jogadores?: boolean | Equipe$jogadoresArgs<ExtArgs>
    jogosCasa?: boolean | Equipe$jogosCasaArgs<ExtArgs>
    jogosFora?: boolean | Equipe$jogosForaArgs<ExtArgs>
    _count?: boolean | EquipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipe"]>

  export type EquipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    slug?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["equipe"]>

  export type EquipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    slug?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["equipe"]>

  export type EquipeSelectScalar = {
    id?: boolean
    nome?: boolean
    slug?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EquipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "slug" | "contato" | "capitao" | "aceiteRegulamento" | "createdAt" | "updatedAt", ExtArgs["result"]["equipe"]>
  export type EquipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogadores?: boolean | Equipe$jogadoresArgs<ExtArgs>
    jogosCasa?: boolean | Equipe$jogosCasaArgs<ExtArgs>
    jogosFora?: boolean | Equipe$jogosForaArgs<ExtArgs>
    _count?: boolean | EquipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipe"
    objects: {
      jogadores: Prisma.$JogadorPayload<ExtArgs>[]
      jogosCasa: Prisma.$JogoPayload<ExtArgs>[]
      jogosFora: Prisma.$JogoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      slug: string
      contato: string
      capitao: string
      aceiteRegulamento: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["equipe"]>
    composites: {}
  }

  type EquipeGetPayload<S extends boolean | null | undefined | EquipeDefaultArgs> = $Result.GetResult<Prisma.$EquipePayload, S>

  type EquipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipeCountAggregateInputType | true
    }

  export interface EquipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipe'], meta: { name: 'Equipe' } }
    /**
     * Find zero or one Equipe that matches the filter.
     * @param {EquipeFindUniqueArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipeFindUniqueArgs>(args: SelectSubset<T, EquipeFindUniqueArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Equipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipeFindUniqueOrThrowArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipeFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeFindFirstArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipeFindFirstArgs>(args?: SelectSubset<T, EquipeFindFirstArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeFindFirstOrThrowArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipeFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Equipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipes
     * const equipes = await prisma.equipe.findMany()
     * 
     * // Get first 10 Equipes
     * const equipes = await prisma.equipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipeWithIdOnly = await prisma.equipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipeFindManyArgs>(args?: SelectSubset<T, EquipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Equipe.
     * @param {EquipeCreateArgs} args - Arguments to create a Equipe.
     * @example
     * // Create one Equipe
     * const Equipe = await prisma.equipe.create({
     *   data: {
     *     // ... data to create a Equipe
     *   }
     * })
     * 
     */
    create<T extends EquipeCreateArgs>(args: SelectSubset<T, EquipeCreateArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Equipes.
     * @param {EquipeCreateManyArgs} args - Arguments to create many Equipes.
     * @example
     * // Create many Equipes
     * const equipe = await prisma.equipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipeCreateManyArgs>(args?: SelectSubset<T, EquipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipes and returns the data saved in the database.
     * @param {EquipeCreateManyAndReturnArgs} args - Arguments to create many Equipes.
     * @example
     * // Create many Equipes
     * const equipe = await prisma.equipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipes and only return the `id`
     * const equipeWithIdOnly = await prisma.equipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipeCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Equipe.
     * @param {EquipeDeleteArgs} args - Arguments to delete one Equipe.
     * @example
     * // Delete one Equipe
     * const Equipe = await prisma.equipe.delete({
     *   where: {
     *     // ... filter to delete one Equipe
     *   }
     * })
     * 
     */
    delete<T extends EquipeDeleteArgs>(args: SelectSubset<T, EquipeDeleteArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Equipe.
     * @param {EquipeUpdateArgs} args - Arguments to update one Equipe.
     * @example
     * // Update one Equipe
     * const equipe = await prisma.equipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipeUpdateArgs>(args: SelectSubset<T, EquipeUpdateArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Equipes.
     * @param {EquipeDeleteManyArgs} args - Arguments to filter Equipes to delete.
     * @example
     * // Delete a few Equipes
     * const { count } = await prisma.equipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipeDeleteManyArgs>(args?: SelectSubset<T, EquipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipes
     * const equipe = await prisma.equipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipeUpdateManyArgs>(args: SelectSubset<T, EquipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipes and returns the data updated in the database.
     * @param {EquipeUpdateManyAndReturnArgs} args - Arguments to update many Equipes.
     * @example
     * // Update many Equipes
     * const equipe = await prisma.equipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipes and only return the `id`
     * const equipeWithIdOnly = await prisma.equipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipeUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Equipe.
     * @param {EquipeUpsertArgs} args - Arguments to update or create a Equipe.
     * @example
     * // Update or create a Equipe
     * const equipe = await prisma.equipe.upsert({
     *   create: {
     *     // ... data to create a Equipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipe we want to update
     *   }
     * })
     */
    upsert<T extends EquipeUpsertArgs>(args: SelectSubset<T, EquipeUpsertArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Equipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeCountArgs} args - Arguments to filter Equipes to count.
     * @example
     * // Count the number of Equipes
     * const count = await prisma.equipe.count({
     *   where: {
     *     // ... the filter for the Equipes we want to count
     *   }
     * })
    **/
    count<T extends EquipeCountArgs>(
      args?: Subset<T, EquipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipeAggregateArgs>(args: Subset<T, EquipeAggregateArgs>): Prisma.PrismaPromise<GetEquipeAggregateType<T>>

    /**
     * Group by Equipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipeGroupByArgs['orderBy'] }
        : { orderBy?: EquipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipe model
   */
  readonly fields: EquipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jogadores<T extends Equipe$jogadoresArgs<ExtArgs> = {}>(args?: Subset<T, Equipe$jogadoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jogosCasa<T extends Equipe$jogosCasaArgs<ExtArgs> = {}>(args?: Subset<T, Equipe$jogosCasaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jogosFora<T extends Equipe$jogosForaArgs<ExtArgs> = {}>(args?: Subset<T, Equipe$jogosForaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Equipe model
   */
  interface EquipeFieldRefs {
    readonly id: FieldRef<"Equipe", 'String'>
    readonly nome: FieldRef<"Equipe", 'String'>
    readonly slug: FieldRef<"Equipe", 'String'>
    readonly contato: FieldRef<"Equipe", 'String'>
    readonly capitao: FieldRef<"Equipe", 'String'>
    readonly aceiteRegulamento: FieldRef<"Equipe", 'Boolean'>
    readonly createdAt: FieldRef<"Equipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Equipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Equipe findUnique
   */
  export type EquipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe findUniqueOrThrow
   */
  export type EquipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe findFirst
   */
  export type EquipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipes.
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipes.
     */
    distinct?: EquipeScalarFieldEnum | EquipeScalarFieldEnum[]
  }

  /**
   * Equipe findFirstOrThrow
   */
  export type EquipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipes.
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipes.
     */
    distinct?: EquipeScalarFieldEnum | EquipeScalarFieldEnum[]
  }

  /**
   * Equipe findMany
   */
  export type EquipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipes to fetch.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipes.
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    distinct?: EquipeScalarFieldEnum | EquipeScalarFieldEnum[]
  }

  /**
   * Equipe create
   */
  export type EquipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipe.
     */
    data: XOR<EquipeCreateInput, EquipeUncheckedCreateInput>
  }

  /**
   * Equipe createMany
   */
  export type EquipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipes.
     */
    data: EquipeCreateManyInput | EquipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipe createManyAndReturn
   */
  export type EquipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * The data used to create many Equipes.
     */
    data: EquipeCreateManyInput | EquipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipe update
   */
  export type EquipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipe.
     */
    data: XOR<EquipeUpdateInput, EquipeUncheckedUpdateInput>
    /**
     * Choose, which Equipe to update.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe updateMany
   */
  export type EquipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipes.
     */
    data: XOR<EquipeUpdateManyMutationInput, EquipeUncheckedUpdateManyInput>
    /**
     * Filter which Equipes to update
     */
    where?: EquipeWhereInput
    /**
     * Limit how many Equipes to update.
     */
    limit?: number
  }

  /**
   * Equipe updateManyAndReturn
   */
  export type EquipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * The data used to update Equipes.
     */
    data: XOR<EquipeUpdateManyMutationInput, EquipeUncheckedUpdateManyInput>
    /**
     * Filter which Equipes to update
     */
    where?: EquipeWhereInput
    /**
     * Limit how many Equipes to update.
     */
    limit?: number
  }

  /**
   * Equipe upsert
   */
  export type EquipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipe to update in case it exists.
     */
    where: EquipeWhereUniqueInput
    /**
     * In case the Equipe found by the `where` argument doesn't exist, create a new Equipe with this data.
     */
    create: XOR<EquipeCreateInput, EquipeUncheckedCreateInput>
    /**
     * In case the Equipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipeUpdateInput, EquipeUncheckedUpdateInput>
  }

  /**
   * Equipe delete
   */
  export type EquipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter which Equipe to delete.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe deleteMany
   */
  export type EquipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipes to delete
     */
    where?: EquipeWhereInput
    /**
     * Limit how many Equipes to delete.
     */
    limit?: number
  }

  /**
   * Equipe.jogadores
   */
  export type Equipe$jogadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    where?: JogadorWhereInput
    orderBy?: JogadorOrderByWithRelationInput | JogadorOrderByWithRelationInput[]
    cursor?: JogadorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JogadorScalarFieldEnum | JogadorScalarFieldEnum[]
  }

  /**
   * Equipe.jogosCasa
   */
  export type Equipe$jogosCasaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    where?: JogoWhereInput
    orderBy?: JogoOrderByWithRelationInput | JogoOrderByWithRelationInput[]
    cursor?: JogoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JogoScalarFieldEnum | JogoScalarFieldEnum[]
  }

  /**
   * Equipe.jogosFora
   */
  export type Equipe$jogosForaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    where?: JogoWhereInput
    orderBy?: JogoOrderByWithRelationInput | JogoOrderByWithRelationInput[]
    cursor?: JogoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JogoScalarFieldEnum | JogoScalarFieldEnum[]
  }

  /**
   * Equipe without action
   */
  export type EquipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipe
     */
    omit?: EquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
  }


  /**
   * Model Jogador
   */

  export type AggregateJogador = {
    _count: JogadorCountAggregateOutputType | null
    _avg: JogadorAvgAggregateOutputType | null
    _sum: JogadorSumAggregateOutputType | null
    _min: JogadorMinAggregateOutputType | null
    _max: JogadorMaxAggregateOutputType | null
  }

  export type JogadorAvgAggregateOutputType = {
    numero: number | null
  }

  export type JogadorSumAggregateOutputType = {
    numero: number | null
  }

  export type JogadorMinAggregateOutputType = {
    id: string | null
    nome: string | null
    posicao: string | null
    numero: number | null
    fotoUrl: string | null
    equipeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogadorMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    posicao: string | null
    numero: number | null
    fotoUrl: string | null
    equipeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogadorCountAggregateOutputType = {
    id: number
    nome: number
    posicao: number
    numero: number
    fotoUrl: number
    equipeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JogadorAvgAggregateInputType = {
    numero?: true
  }

  export type JogadorSumAggregateInputType = {
    numero?: true
  }

  export type JogadorMinAggregateInputType = {
    id?: true
    nome?: true
    posicao?: true
    numero?: true
    fotoUrl?: true
    equipeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogadorMaxAggregateInputType = {
    id?: true
    nome?: true
    posicao?: true
    numero?: true
    fotoUrl?: true
    equipeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogadorCountAggregateInputType = {
    id?: true
    nome?: true
    posicao?: true
    numero?: true
    fotoUrl?: true
    equipeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JogadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jogador to aggregate.
     */
    where?: JogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadors to fetch.
     */
    orderBy?: JogadorOrderByWithRelationInput | JogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jogadors
    **/
    _count?: true | JogadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JogadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JogadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JogadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JogadorMaxAggregateInputType
  }

  export type GetJogadorAggregateType<T extends JogadorAggregateArgs> = {
        [P in keyof T & keyof AggregateJogador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJogador[P]>
      : GetScalarType<T[P], AggregateJogador[P]>
  }




  export type JogadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JogadorWhereInput
    orderBy?: JogadorOrderByWithAggregationInput | JogadorOrderByWithAggregationInput[]
    by: JogadorScalarFieldEnum[] | JogadorScalarFieldEnum
    having?: JogadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JogadorCountAggregateInputType | true
    _avg?: JogadorAvgAggregateInputType
    _sum?: JogadorSumAggregateInputType
    _min?: JogadorMinAggregateInputType
    _max?: JogadorMaxAggregateInputType
  }

  export type JogadorGroupByOutputType = {
    id: string
    nome: string
    posicao: string
    numero: number
    fotoUrl: string | null
    equipeId: string
    createdAt: Date
    updatedAt: Date
    _count: JogadorCountAggregateOutputType | null
    _avg: JogadorAvgAggregateOutputType | null
    _sum: JogadorSumAggregateOutputType | null
    _min: JogadorMinAggregateOutputType | null
    _max: JogadorMaxAggregateOutputType | null
  }

  type GetJogadorGroupByPayload<T extends JogadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JogadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JogadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JogadorGroupByOutputType[P]>
            : GetScalarType<T[P], JogadorGroupByOutputType[P]>
        }
      >
    >


  export type JogadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    fotoUrl?: boolean
    equipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
    gols?: boolean | Jogador$golsArgs<ExtArgs>
    _count?: boolean | JogadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogador"]>

  export type JogadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    fotoUrl?: boolean
    equipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogador"]>

  export type JogadorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    fotoUrl?: boolean
    equipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogador"]>

  export type JogadorSelectScalar = {
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    fotoUrl?: boolean
    equipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JogadorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "posicao" | "numero" | "fotoUrl" | "equipeId" | "createdAt" | "updatedAt", ExtArgs["result"]["jogador"]>
  export type JogadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
    gols?: boolean | Jogador$golsArgs<ExtArgs>
    _count?: boolean | JogadorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JogadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
  }
  export type JogadorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
  }

  export type $JogadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jogador"
    objects: {
      equipe: Prisma.$EquipePayload<ExtArgs>
      gols: Prisma.$GolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      posicao: string
      numero: number
      fotoUrl: string | null
      equipeId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jogador"]>
    composites: {}
  }

  type JogadorGetPayload<S extends boolean | null | undefined | JogadorDefaultArgs> = $Result.GetResult<Prisma.$JogadorPayload, S>

  type JogadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JogadorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JogadorCountAggregateInputType | true
    }

  export interface JogadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jogador'], meta: { name: 'Jogador' } }
    /**
     * Find zero or one Jogador that matches the filter.
     * @param {JogadorFindUniqueArgs} args - Arguments to find a Jogador
     * @example
     * // Get one Jogador
     * const jogador = await prisma.jogador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JogadorFindUniqueArgs>(args: SelectSubset<T, JogadorFindUniqueArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Jogador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JogadorFindUniqueOrThrowArgs} args - Arguments to find a Jogador
     * @example
     * // Get one Jogador
     * const jogador = await prisma.jogador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JogadorFindUniqueOrThrowArgs>(args: SelectSubset<T, JogadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jogador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorFindFirstArgs} args - Arguments to find a Jogador
     * @example
     * // Get one Jogador
     * const jogador = await prisma.jogador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JogadorFindFirstArgs>(args?: SelectSubset<T, JogadorFindFirstArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jogador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorFindFirstOrThrowArgs} args - Arguments to find a Jogador
     * @example
     * // Get one Jogador
     * const jogador = await prisma.jogador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JogadorFindFirstOrThrowArgs>(args?: SelectSubset<T, JogadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jogadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jogadors
     * const jogadors = await prisma.jogador.findMany()
     * 
     * // Get first 10 Jogadors
     * const jogadors = await prisma.jogador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jogadorWithIdOnly = await prisma.jogador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JogadorFindManyArgs>(args?: SelectSubset<T, JogadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Jogador.
     * @param {JogadorCreateArgs} args - Arguments to create a Jogador.
     * @example
     * // Create one Jogador
     * const Jogador = await prisma.jogador.create({
     *   data: {
     *     // ... data to create a Jogador
     *   }
     * })
     * 
     */
    create<T extends JogadorCreateArgs>(args: SelectSubset<T, JogadorCreateArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jogadors.
     * @param {JogadorCreateManyArgs} args - Arguments to create many Jogadors.
     * @example
     * // Create many Jogadors
     * const jogador = await prisma.jogador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JogadorCreateManyArgs>(args?: SelectSubset<T, JogadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jogadors and returns the data saved in the database.
     * @param {JogadorCreateManyAndReturnArgs} args - Arguments to create many Jogadors.
     * @example
     * // Create many Jogadors
     * const jogador = await prisma.jogador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jogadors and only return the `id`
     * const jogadorWithIdOnly = await prisma.jogador.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JogadorCreateManyAndReturnArgs>(args?: SelectSubset<T, JogadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Jogador.
     * @param {JogadorDeleteArgs} args - Arguments to delete one Jogador.
     * @example
     * // Delete one Jogador
     * const Jogador = await prisma.jogador.delete({
     *   where: {
     *     // ... filter to delete one Jogador
     *   }
     * })
     * 
     */
    delete<T extends JogadorDeleteArgs>(args: SelectSubset<T, JogadorDeleteArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Jogador.
     * @param {JogadorUpdateArgs} args - Arguments to update one Jogador.
     * @example
     * // Update one Jogador
     * const jogador = await prisma.jogador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JogadorUpdateArgs>(args: SelectSubset<T, JogadorUpdateArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jogadors.
     * @param {JogadorDeleteManyArgs} args - Arguments to filter Jogadors to delete.
     * @example
     * // Delete a few Jogadors
     * const { count } = await prisma.jogador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JogadorDeleteManyArgs>(args?: SelectSubset<T, JogadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jogadors
     * const jogador = await prisma.jogador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JogadorUpdateManyArgs>(args: SelectSubset<T, JogadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogadors and returns the data updated in the database.
     * @param {JogadorUpdateManyAndReturnArgs} args - Arguments to update many Jogadors.
     * @example
     * // Update many Jogadors
     * const jogador = await prisma.jogador.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jogadors and only return the `id`
     * const jogadorWithIdOnly = await prisma.jogador.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JogadorUpdateManyAndReturnArgs>(args: SelectSubset<T, JogadorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Jogador.
     * @param {JogadorUpsertArgs} args - Arguments to update or create a Jogador.
     * @example
     * // Update or create a Jogador
     * const jogador = await prisma.jogador.upsert({
     *   create: {
     *     // ... data to create a Jogador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jogador we want to update
     *   }
     * })
     */
    upsert<T extends JogadorUpsertArgs>(args: SelectSubset<T, JogadorUpsertArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jogadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorCountArgs} args - Arguments to filter Jogadors to count.
     * @example
     * // Count the number of Jogadors
     * const count = await prisma.jogador.count({
     *   where: {
     *     // ... the filter for the Jogadors we want to count
     *   }
     * })
    **/
    count<T extends JogadorCountArgs>(
      args?: Subset<T, JogadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JogadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jogador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JogadorAggregateArgs>(args: Subset<T, JogadorAggregateArgs>): Prisma.PrismaPromise<GetJogadorAggregateType<T>>

    /**
     * Group by Jogador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JogadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JogadorGroupByArgs['orderBy'] }
        : { orderBy?: JogadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JogadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJogadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jogador model
   */
  readonly fields: JogadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jogador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JogadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipe<T extends EquipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipeDefaultArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gols<T extends Jogador$golsArgs<ExtArgs> = {}>(args?: Subset<T, Jogador$golsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jogador model
   */
  interface JogadorFieldRefs {
    readonly id: FieldRef<"Jogador", 'String'>
    readonly nome: FieldRef<"Jogador", 'String'>
    readonly posicao: FieldRef<"Jogador", 'String'>
    readonly numero: FieldRef<"Jogador", 'Int'>
    readonly fotoUrl: FieldRef<"Jogador", 'String'>
    readonly equipeId: FieldRef<"Jogador", 'String'>
    readonly createdAt: FieldRef<"Jogador", 'DateTime'>
    readonly updatedAt: FieldRef<"Jogador", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Jogador findUnique
   */
  export type JogadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * Filter, which Jogador to fetch.
     */
    where: JogadorWhereUniqueInput
  }

  /**
   * Jogador findUniqueOrThrow
   */
  export type JogadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * Filter, which Jogador to fetch.
     */
    where: JogadorWhereUniqueInput
  }

  /**
   * Jogador findFirst
   */
  export type JogadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * Filter, which Jogador to fetch.
     */
    where?: JogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadors to fetch.
     */
    orderBy?: JogadorOrderByWithRelationInput | JogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogadors.
     */
    cursor?: JogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogadors.
     */
    distinct?: JogadorScalarFieldEnum | JogadorScalarFieldEnum[]
  }

  /**
   * Jogador findFirstOrThrow
   */
  export type JogadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * Filter, which Jogador to fetch.
     */
    where?: JogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadors to fetch.
     */
    orderBy?: JogadorOrderByWithRelationInput | JogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogadors.
     */
    cursor?: JogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogadors.
     */
    distinct?: JogadorScalarFieldEnum | JogadorScalarFieldEnum[]
  }

  /**
   * Jogador findMany
   */
  export type JogadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * Filter, which Jogadors to fetch.
     */
    where?: JogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadors to fetch.
     */
    orderBy?: JogadorOrderByWithRelationInput | JogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jogadors.
     */
    cursor?: JogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadors.
     */
    skip?: number
    distinct?: JogadorScalarFieldEnum | JogadorScalarFieldEnum[]
  }

  /**
   * Jogador create
   */
  export type JogadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Jogador.
     */
    data: XOR<JogadorCreateInput, JogadorUncheckedCreateInput>
  }

  /**
   * Jogador createMany
   */
  export type JogadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jogadors.
     */
    data: JogadorCreateManyInput | JogadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Jogador createManyAndReturn
   */
  export type JogadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * The data used to create many Jogadors.
     */
    data: JogadorCreateManyInput | JogadorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Jogador update
   */
  export type JogadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Jogador.
     */
    data: XOR<JogadorUpdateInput, JogadorUncheckedUpdateInput>
    /**
     * Choose, which Jogador to update.
     */
    where: JogadorWhereUniqueInput
  }

  /**
   * Jogador updateMany
   */
  export type JogadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jogadors.
     */
    data: XOR<JogadorUpdateManyMutationInput, JogadorUncheckedUpdateManyInput>
    /**
     * Filter which Jogadors to update
     */
    where?: JogadorWhereInput
    /**
     * Limit how many Jogadors to update.
     */
    limit?: number
  }

  /**
   * Jogador updateManyAndReturn
   */
  export type JogadorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * The data used to update Jogadors.
     */
    data: XOR<JogadorUpdateManyMutationInput, JogadorUncheckedUpdateManyInput>
    /**
     * Filter which Jogadors to update
     */
    where?: JogadorWhereInput
    /**
     * Limit how many Jogadors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Jogador upsert
   */
  export type JogadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Jogador to update in case it exists.
     */
    where: JogadorWhereUniqueInput
    /**
     * In case the Jogador found by the `where` argument doesn't exist, create a new Jogador with this data.
     */
    create: XOR<JogadorCreateInput, JogadorUncheckedCreateInput>
    /**
     * In case the Jogador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JogadorUpdateInput, JogadorUncheckedUpdateInput>
  }

  /**
   * Jogador delete
   */
  export type JogadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
    /**
     * Filter which Jogador to delete.
     */
    where: JogadorWhereUniqueInput
  }

  /**
   * Jogador deleteMany
   */
  export type JogadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jogadors to delete
     */
    where?: JogadorWhereInput
    /**
     * Limit how many Jogadors to delete.
     */
    limit?: number
  }

  /**
   * Jogador.gols
   */
  export type Jogador$golsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    where?: GolWhereInput
    orderBy?: GolOrderByWithRelationInput | GolOrderByWithRelationInput[]
    cursor?: GolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GolScalarFieldEnum | GolScalarFieldEnum[]
  }

  /**
   * Jogador without action
   */
  export type JogadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogador
     */
    select?: JogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogador
     */
    omit?: JogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogadorInclude<ExtArgs> | null
  }


  /**
   * Model Jogo
   */

  export type AggregateJogo = {
    _count: JogoCountAggregateOutputType | null
    _avg: JogoAvgAggregateOutputType | null
    _sum: JogoSumAggregateOutputType | null
    _min: JogoMinAggregateOutputType | null
    _max: JogoMaxAggregateOutputType | null
  }

  export type JogoAvgAggregateOutputType = {
    golsCasa: number | null
    golsFora: number | null
  }

  export type JogoSumAggregateOutputType = {
    golsCasa: number | null
    golsFora: number | null
  }

  export type JogoMinAggregateOutputType = {
    id: string | null
    equipeCasaId: string | null
    equipeForaId: string | null
    golsCasa: number | null
    golsFora: number | null
    data: Date | null
    local: string | null
    status: $Enums.StatusJogo | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogoMaxAggregateOutputType = {
    id: string | null
    equipeCasaId: string | null
    equipeForaId: string | null
    golsCasa: number | null
    golsFora: number | null
    data: Date | null
    local: string | null
    status: $Enums.StatusJogo | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogoCountAggregateOutputType = {
    id: number
    equipeCasaId: number
    equipeForaId: number
    golsCasa: number
    golsFora: number
    data: number
    local: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JogoAvgAggregateInputType = {
    golsCasa?: true
    golsFora?: true
  }

  export type JogoSumAggregateInputType = {
    golsCasa?: true
    golsFora?: true
  }

  export type JogoMinAggregateInputType = {
    id?: true
    equipeCasaId?: true
    equipeForaId?: true
    golsCasa?: true
    golsFora?: true
    data?: true
    local?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogoMaxAggregateInputType = {
    id?: true
    equipeCasaId?: true
    equipeForaId?: true
    golsCasa?: true
    golsFora?: true
    data?: true
    local?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogoCountAggregateInputType = {
    id?: true
    equipeCasaId?: true
    equipeForaId?: true
    golsCasa?: true
    golsFora?: true
    data?: true
    local?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JogoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jogo to aggregate.
     */
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     */
    orderBy?: JogoOrderByWithRelationInput | JogoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jogos
    **/
    _count?: true | JogoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JogoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JogoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JogoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JogoMaxAggregateInputType
  }

  export type GetJogoAggregateType<T extends JogoAggregateArgs> = {
        [P in keyof T & keyof AggregateJogo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJogo[P]>
      : GetScalarType<T[P], AggregateJogo[P]>
  }




  export type JogoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JogoWhereInput
    orderBy?: JogoOrderByWithAggregationInput | JogoOrderByWithAggregationInput[]
    by: JogoScalarFieldEnum[] | JogoScalarFieldEnum
    having?: JogoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JogoCountAggregateInputType | true
    _avg?: JogoAvgAggregateInputType
    _sum?: JogoSumAggregateInputType
    _min?: JogoMinAggregateInputType
    _max?: JogoMaxAggregateInputType
  }

  export type JogoGroupByOutputType = {
    id: string
    equipeCasaId: string
    equipeForaId: string
    golsCasa: number
    golsFora: number
    data: Date
    local: string
    status: $Enums.StatusJogo
    createdAt: Date
    updatedAt: Date
    _count: JogoCountAggregateOutputType | null
    _avg: JogoAvgAggregateOutputType | null
    _sum: JogoSumAggregateOutputType | null
    _min: JogoMinAggregateOutputType | null
    _max: JogoMaxAggregateOutputType | null
  }

  type GetJogoGroupByPayload<T extends JogoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JogoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JogoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JogoGroupByOutputType[P]>
            : GetScalarType<T[P], JogoGroupByOutputType[P]>
        }
      >
    >


  export type JogoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    equipeCasaId?: boolean
    equipeForaId?: boolean
    golsCasa?: boolean
    golsFora?: boolean
    data?: boolean
    local?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipeCasa?: boolean | EquipeDefaultArgs<ExtArgs>
    equipeFora?: boolean | EquipeDefaultArgs<ExtArgs>
    gols?: boolean | Jogo$golsArgs<ExtArgs>
    _count?: boolean | JogoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogo"]>

  export type JogoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    equipeCasaId?: boolean
    equipeForaId?: boolean
    golsCasa?: boolean
    golsFora?: boolean
    data?: boolean
    local?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipeCasa?: boolean | EquipeDefaultArgs<ExtArgs>
    equipeFora?: boolean | EquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogo"]>

  export type JogoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    equipeCasaId?: boolean
    equipeForaId?: boolean
    golsCasa?: boolean
    golsFora?: boolean
    data?: boolean
    local?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipeCasa?: boolean | EquipeDefaultArgs<ExtArgs>
    equipeFora?: boolean | EquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogo"]>

  export type JogoSelectScalar = {
    id?: boolean
    equipeCasaId?: boolean
    equipeForaId?: boolean
    golsCasa?: boolean
    golsFora?: boolean
    data?: boolean
    local?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JogoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "equipeCasaId" | "equipeForaId" | "golsCasa" | "golsFora" | "data" | "local" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["jogo"]>
  export type JogoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipeCasa?: boolean | EquipeDefaultArgs<ExtArgs>
    equipeFora?: boolean | EquipeDefaultArgs<ExtArgs>
    gols?: boolean | Jogo$golsArgs<ExtArgs>
    _count?: boolean | JogoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JogoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipeCasa?: boolean | EquipeDefaultArgs<ExtArgs>
    equipeFora?: boolean | EquipeDefaultArgs<ExtArgs>
  }
  export type JogoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipeCasa?: boolean | EquipeDefaultArgs<ExtArgs>
    equipeFora?: boolean | EquipeDefaultArgs<ExtArgs>
  }

  export type $JogoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jogo"
    objects: {
      equipeCasa: Prisma.$EquipePayload<ExtArgs>
      equipeFora: Prisma.$EquipePayload<ExtArgs>
      gols: Prisma.$GolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      equipeCasaId: string
      equipeForaId: string
      golsCasa: number
      golsFora: number
      data: Date
      local: string
      status: $Enums.StatusJogo
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jogo"]>
    composites: {}
  }

  type JogoGetPayload<S extends boolean | null | undefined | JogoDefaultArgs> = $Result.GetResult<Prisma.$JogoPayload, S>

  type JogoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JogoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JogoCountAggregateInputType | true
    }

  export interface JogoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jogo'], meta: { name: 'Jogo' } }
    /**
     * Find zero or one Jogo that matches the filter.
     * @param {JogoFindUniqueArgs} args - Arguments to find a Jogo
     * @example
     * // Get one Jogo
     * const jogo = await prisma.jogo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JogoFindUniqueArgs>(args: SelectSubset<T, JogoFindUniqueArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Jogo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JogoFindUniqueOrThrowArgs} args - Arguments to find a Jogo
     * @example
     * // Get one Jogo
     * const jogo = await prisma.jogo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JogoFindUniqueOrThrowArgs>(args: SelectSubset<T, JogoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jogo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoFindFirstArgs} args - Arguments to find a Jogo
     * @example
     * // Get one Jogo
     * const jogo = await prisma.jogo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JogoFindFirstArgs>(args?: SelectSubset<T, JogoFindFirstArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jogo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoFindFirstOrThrowArgs} args - Arguments to find a Jogo
     * @example
     * // Get one Jogo
     * const jogo = await prisma.jogo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JogoFindFirstOrThrowArgs>(args?: SelectSubset<T, JogoFindFirstOrThrowArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jogos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jogos
     * const jogos = await prisma.jogo.findMany()
     * 
     * // Get first 10 Jogos
     * const jogos = await prisma.jogo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jogoWithIdOnly = await prisma.jogo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JogoFindManyArgs>(args?: SelectSubset<T, JogoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Jogo.
     * @param {JogoCreateArgs} args - Arguments to create a Jogo.
     * @example
     * // Create one Jogo
     * const Jogo = await prisma.jogo.create({
     *   data: {
     *     // ... data to create a Jogo
     *   }
     * })
     * 
     */
    create<T extends JogoCreateArgs>(args: SelectSubset<T, JogoCreateArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jogos.
     * @param {JogoCreateManyArgs} args - Arguments to create many Jogos.
     * @example
     * // Create many Jogos
     * const jogo = await prisma.jogo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JogoCreateManyArgs>(args?: SelectSubset<T, JogoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jogos and returns the data saved in the database.
     * @param {JogoCreateManyAndReturnArgs} args - Arguments to create many Jogos.
     * @example
     * // Create many Jogos
     * const jogo = await prisma.jogo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jogos and only return the `id`
     * const jogoWithIdOnly = await prisma.jogo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JogoCreateManyAndReturnArgs>(args?: SelectSubset<T, JogoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Jogo.
     * @param {JogoDeleteArgs} args - Arguments to delete one Jogo.
     * @example
     * // Delete one Jogo
     * const Jogo = await prisma.jogo.delete({
     *   where: {
     *     // ... filter to delete one Jogo
     *   }
     * })
     * 
     */
    delete<T extends JogoDeleteArgs>(args: SelectSubset<T, JogoDeleteArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Jogo.
     * @param {JogoUpdateArgs} args - Arguments to update one Jogo.
     * @example
     * // Update one Jogo
     * const jogo = await prisma.jogo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JogoUpdateArgs>(args: SelectSubset<T, JogoUpdateArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jogos.
     * @param {JogoDeleteManyArgs} args - Arguments to filter Jogos to delete.
     * @example
     * // Delete a few Jogos
     * const { count } = await prisma.jogo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JogoDeleteManyArgs>(args?: SelectSubset<T, JogoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jogos
     * const jogo = await prisma.jogo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JogoUpdateManyArgs>(args: SelectSubset<T, JogoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogos and returns the data updated in the database.
     * @param {JogoUpdateManyAndReturnArgs} args - Arguments to update many Jogos.
     * @example
     * // Update many Jogos
     * const jogo = await prisma.jogo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jogos and only return the `id`
     * const jogoWithIdOnly = await prisma.jogo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JogoUpdateManyAndReturnArgs>(args: SelectSubset<T, JogoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Jogo.
     * @param {JogoUpsertArgs} args - Arguments to update or create a Jogo.
     * @example
     * // Update or create a Jogo
     * const jogo = await prisma.jogo.upsert({
     *   create: {
     *     // ... data to create a Jogo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jogo we want to update
     *   }
     * })
     */
    upsert<T extends JogoUpsertArgs>(args: SelectSubset<T, JogoUpsertArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoCountArgs} args - Arguments to filter Jogos to count.
     * @example
     * // Count the number of Jogos
     * const count = await prisma.jogo.count({
     *   where: {
     *     // ... the filter for the Jogos we want to count
     *   }
     * })
    **/
    count<T extends JogoCountArgs>(
      args?: Subset<T, JogoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JogoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jogo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JogoAggregateArgs>(args: Subset<T, JogoAggregateArgs>): Prisma.PrismaPromise<GetJogoAggregateType<T>>

    /**
     * Group by Jogo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JogoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JogoGroupByArgs['orderBy'] }
        : { orderBy?: JogoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JogoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJogoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jogo model
   */
  readonly fields: JogoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jogo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JogoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipeCasa<T extends EquipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipeDefaultArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    equipeFora<T extends EquipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipeDefaultArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gols<T extends Jogo$golsArgs<ExtArgs> = {}>(args?: Subset<T, Jogo$golsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jogo model
   */
  interface JogoFieldRefs {
    readonly id: FieldRef<"Jogo", 'String'>
    readonly equipeCasaId: FieldRef<"Jogo", 'String'>
    readonly equipeForaId: FieldRef<"Jogo", 'String'>
    readonly golsCasa: FieldRef<"Jogo", 'Int'>
    readonly golsFora: FieldRef<"Jogo", 'Int'>
    readonly data: FieldRef<"Jogo", 'DateTime'>
    readonly local: FieldRef<"Jogo", 'String'>
    readonly status: FieldRef<"Jogo", 'StatusJogo'>
    readonly createdAt: FieldRef<"Jogo", 'DateTime'>
    readonly updatedAt: FieldRef<"Jogo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Jogo findUnique
   */
  export type JogoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * Filter, which Jogo to fetch.
     */
    where: JogoWhereUniqueInput
  }

  /**
   * Jogo findUniqueOrThrow
   */
  export type JogoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * Filter, which Jogo to fetch.
     */
    where: JogoWhereUniqueInput
  }

  /**
   * Jogo findFirst
   */
  export type JogoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * Filter, which Jogo to fetch.
     */
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     */
    orderBy?: JogoOrderByWithRelationInput | JogoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogos.
     */
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogos.
     */
    distinct?: JogoScalarFieldEnum | JogoScalarFieldEnum[]
  }

  /**
   * Jogo findFirstOrThrow
   */
  export type JogoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * Filter, which Jogo to fetch.
     */
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     */
    orderBy?: JogoOrderByWithRelationInput | JogoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogos.
     */
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogos.
     */
    distinct?: JogoScalarFieldEnum | JogoScalarFieldEnum[]
  }

  /**
   * Jogo findMany
   */
  export type JogoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * Filter, which Jogos to fetch.
     */
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     */
    orderBy?: JogoOrderByWithRelationInput | JogoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jogos.
     */
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     */
    skip?: number
    distinct?: JogoScalarFieldEnum | JogoScalarFieldEnum[]
  }

  /**
   * Jogo create
   */
  export type JogoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * The data needed to create a Jogo.
     */
    data: XOR<JogoCreateInput, JogoUncheckedCreateInput>
  }

  /**
   * Jogo createMany
   */
  export type JogoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jogos.
     */
    data: JogoCreateManyInput | JogoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Jogo createManyAndReturn
   */
  export type JogoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * The data used to create many Jogos.
     */
    data: JogoCreateManyInput | JogoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Jogo update
   */
  export type JogoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * The data needed to update a Jogo.
     */
    data: XOR<JogoUpdateInput, JogoUncheckedUpdateInput>
    /**
     * Choose, which Jogo to update.
     */
    where: JogoWhereUniqueInput
  }

  /**
   * Jogo updateMany
   */
  export type JogoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jogos.
     */
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyInput>
    /**
     * Filter which Jogos to update
     */
    where?: JogoWhereInput
    /**
     * Limit how many Jogos to update.
     */
    limit?: number
  }

  /**
   * Jogo updateManyAndReturn
   */
  export type JogoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * The data used to update Jogos.
     */
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyInput>
    /**
     * Filter which Jogos to update
     */
    where?: JogoWhereInput
    /**
     * Limit how many Jogos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Jogo upsert
   */
  export type JogoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * The filter to search for the Jogo to update in case it exists.
     */
    where: JogoWhereUniqueInput
    /**
     * In case the Jogo found by the `where` argument doesn't exist, create a new Jogo with this data.
     */
    create: XOR<JogoCreateInput, JogoUncheckedCreateInput>
    /**
     * In case the Jogo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JogoUpdateInput, JogoUncheckedUpdateInput>
  }

  /**
   * Jogo delete
   */
  export type JogoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
    /**
     * Filter which Jogo to delete.
     */
    where: JogoWhereUniqueInput
  }

  /**
   * Jogo deleteMany
   */
  export type JogoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jogos to delete
     */
    where?: JogoWhereInput
    /**
     * Limit how many Jogos to delete.
     */
    limit?: number
  }

  /**
   * Jogo.gols
   */
  export type Jogo$golsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    where?: GolWhereInput
    orderBy?: GolOrderByWithRelationInput | GolOrderByWithRelationInput[]
    cursor?: GolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GolScalarFieldEnum | GolScalarFieldEnum[]
  }

  /**
   * Jogo without action
   */
  export type JogoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogo
     */
    select?: JogoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Jogo
     */
    omit?: JogoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogoInclude<ExtArgs> | null
  }


  /**
   * Model Gol
   */

  export type AggregateGol = {
    _count: GolCountAggregateOutputType | null
    _avg: GolAvgAggregateOutputType | null
    _sum: GolSumAggregateOutputType | null
    _min: GolMinAggregateOutputType | null
    _max: GolMaxAggregateOutputType | null
  }

  export type GolAvgAggregateOutputType = {
    minuto: number | null
  }

  export type GolSumAggregateOutputType = {
    minuto: number | null
  }

  export type GolMinAggregateOutputType = {
    id: string | null
    jogadorId: string | null
    jogoId: string | null
    minuto: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GolMaxAggregateOutputType = {
    id: string | null
    jogadorId: string | null
    jogoId: string | null
    minuto: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GolCountAggregateOutputType = {
    id: number
    jogadorId: number
    jogoId: number
    minuto: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GolAvgAggregateInputType = {
    minuto?: true
  }

  export type GolSumAggregateInputType = {
    minuto?: true
  }

  export type GolMinAggregateInputType = {
    id?: true
    jogadorId?: true
    jogoId?: true
    minuto?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GolMaxAggregateInputType = {
    id?: true
    jogadorId?: true
    jogoId?: true
    minuto?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GolCountAggregateInputType = {
    id?: true
    jogadorId?: true
    jogoId?: true
    minuto?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gol to aggregate.
     */
    where?: GolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gols to fetch.
     */
    orderBy?: GolOrderByWithRelationInput | GolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gols
    **/
    _count?: true | GolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GolMaxAggregateInputType
  }

  export type GetGolAggregateType<T extends GolAggregateArgs> = {
        [P in keyof T & keyof AggregateGol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGol[P]>
      : GetScalarType<T[P], AggregateGol[P]>
  }




  export type GolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GolWhereInput
    orderBy?: GolOrderByWithAggregationInput | GolOrderByWithAggregationInput[]
    by: GolScalarFieldEnum[] | GolScalarFieldEnum
    having?: GolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GolCountAggregateInputType | true
    _avg?: GolAvgAggregateInputType
    _sum?: GolSumAggregateInputType
    _min?: GolMinAggregateInputType
    _max?: GolMaxAggregateInputType
  }

  export type GolGroupByOutputType = {
    id: string
    jogadorId: string
    jogoId: string
    minuto: number | null
    createdAt: Date
    updatedAt: Date
    _count: GolCountAggregateOutputType | null
    _avg: GolAvgAggregateOutputType | null
    _sum: GolSumAggregateOutputType | null
    _min: GolMinAggregateOutputType | null
    _max: GolMaxAggregateOutputType | null
  }

  type GetGolGroupByPayload<T extends GolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GolGroupByOutputType[P]>
            : GetScalarType<T[P], GolGroupByOutputType[P]>
        }
      >
    >


  export type GolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jogadorId?: boolean
    jogoId?: boolean
    minuto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jogador?: boolean | JogadorDefaultArgs<ExtArgs>
    jogo?: boolean | JogoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gol"]>

  export type GolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jogadorId?: boolean
    jogoId?: boolean
    minuto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jogador?: boolean | JogadorDefaultArgs<ExtArgs>
    jogo?: boolean | JogoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gol"]>

  export type GolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jogadorId?: boolean
    jogoId?: boolean
    minuto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jogador?: boolean | JogadorDefaultArgs<ExtArgs>
    jogo?: boolean | JogoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gol"]>

  export type GolSelectScalar = {
    id?: boolean
    jogadorId?: boolean
    jogoId?: boolean
    minuto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jogadorId" | "jogoId" | "minuto" | "createdAt" | "updatedAt", ExtArgs["result"]["gol"]>
  export type GolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogador?: boolean | JogadorDefaultArgs<ExtArgs>
    jogo?: boolean | JogoDefaultArgs<ExtArgs>
  }
  export type GolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogador?: boolean | JogadorDefaultArgs<ExtArgs>
    jogo?: boolean | JogoDefaultArgs<ExtArgs>
  }
  export type GolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogador?: boolean | JogadorDefaultArgs<ExtArgs>
    jogo?: boolean | JogoDefaultArgs<ExtArgs>
  }

  export type $GolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gol"
    objects: {
      jogador: Prisma.$JogadorPayload<ExtArgs>
      jogo: Prisma.$JogoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jogadorId: string
      jogoId: string
      minuto: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["gol"]>
    composites: {}
  }

  type GolGetPayload<S extends boolean | null | undefined | GolDefaultArgs> = $Result.GetResult<Prisma.$GolPayload, S>

  type GolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GolCountAggregateInputType | true
    }

  export interface GolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gol'], meta: { name: 'Gol' } }
    /**
     * Find zero or one Gol that matches the filter.
     * @param {GolFindUniqueArgs} args - Arguments to find a Gol
     * @example
     * // Get one Gol
     * const gol = await prisma.gol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GolFindUniqueArgs>(args: SelectSubset<T, GolFindUniqueArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Gol that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GolFindUniqueOrThrowArgs} args - Arguments to find a Gol
     * @example
     * // Get one Gol
     * const gol = await prisma.gol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GolFindUniqueOrThrowArgs>(args: SelectSubset<T, GolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolFindFirstArgs} args - Arguments to find a Gol
     * @example
     * // Get one Gol
     * const gol = await prisma.gol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GolFindFirstArgs>(args?: SelectSubset<T, GolFindFirstArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolFindFirstOrThrowArgs} args - Arguments to find a Gol
     * @example
     * // Get one Gol
     * const gol = await prisma.gol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GolFindFirstOrThrowArgs>(args?: SelectSubset<T, GolFindFirstOrThrowArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Gols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gols
     * const gols = await prisma.gol.findMany()
     * 
     * // Get first 10 Gols
     * const gols = await prisma.gol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const golWithIdOnly = await prisma.gol.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GolFindManyArgs>(args?: SelectSubset<T, GolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Gol.
     * @param {GolCreateArgs} args - Arguments to create a Gol.
     * @example
     * // Create one Gol
     * const Gol = await prisma.gol.create({
     *   data: {
     *     // ... data to create a Gol
     *   }
     * })
     * 
     */
    create<T extends GolCreateArgs>(args: SelectSubset<T, GolCreateArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Gols.
     * @param {GolCreateManyArgs} args - Arguments to create many Gols.
     * @example
     * // Create many Gols
     * const gol = await prisma.gol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GolCreateManyArgs>(args?: SelectSubset<T, GolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gols and returns the data saved in the database.
     * @param {GolCreateManyAndReturnArgs} args - Arguments to create many Gols.
     * @example
     * // Create many Gols
     * const gol = await prisma.gol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gols and only return the `id`
     * const golWithIdOnly = await prisma.gol.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GolCreateManyAndReturnArgs>(args?: SelectSubset<T, GolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Gol.
     * @param {GolDeleteArgs} args - Arguments to delete one Gol.
     * @example
     * // Delete one Gol
     * const Gol = await prisma.gol.delete({
     *   where: {
     *     // ... filter to delete one Gol
     *   }
     * })
     * 
     */
    delete<T extends GolDeleteArgs>(args: SelectSubset<T, GolDeleteArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Gol.
     * @param {GolUpdateArgs} args - Arguments to update one Gol.
     * @example
     * // Update one Gol
     * const gol = await prisma.gol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GolUpdateArgs>(args: SelectSubset<T, GolUpdateArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Gols.
     * @param {GolDeleteManyArgs} args - Arguments to filter Gols to delete.
     * @example
     * // Delete a few Gols
     * const { count } = await prisma.gol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GolDeleteManyArgs>(args?: SelectSubset<T, GolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gols
     * const gol = await prisma.gol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GolUpdateManyArgs>(args: SelectSubset<T, GolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gols and returns the data updated in the database.
     * @param {GolUpdateManyAndReturnArgs} args - Arguments to update many Gols.
     * @example
     * // Update many Gols
     * const gol = await prisma.gol.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Gols and only return the `id`
     * const golWithIdOnly = await prisma.gol.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GolUpdateManyAndReturnArgs>(args: SelectSubset<T, GolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Gol.
     * @param {GolUpsertArgs} args - Arguments to update or create a Gol.
     * @example
     * // Update or create a Gol
     * const gol = await prisma.gol.upsert({
     *   create: {
     *     // ... data to create a Gol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gol we want to update
     *   }
     * })
     */
    upsert<T extends GolUpsertArgs>(args: SelectSubset<T, GolUpsertArgs<ExtArgs>>): Prisma__GolClient<$Result.GetResult<Prisma.$GolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Gols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolCountArgs} args - Arguments to filter Gols to count.
     * @example
     * // Count the number of Gols
     * const count = await prisma.gol.count({
     *   where: {
     *     // ... the filter for the Gols we want to count
     *   }
     * })
    **/
    count<T extends GolCountArgs>(
      args?: Subset<T, GolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GolAggregateArgs>(args: Subset<T, GolAggregateArgs>): Prisma.PrismaPromise<GetGolAggregateType<T>>

    /**
     * Group by Gol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GolGroupByArgs['orderBy'] }
        : { orderBy?: GolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gol model
   */
  readonly fields: GolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jogador<T extends JogadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JogadorDefaultArgs<ExtArgs>>): Prisma__JogadorClient<$Result.GetResult<Prisma.$JogadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jogo<T extends JogoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JogoDefaultArgs<ExtArgs>>): Prisma__JogoClient<$Result.GetResult<Prisma.$JogoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gol model
   */
  interface GolFieldRefs {
    readonly id: FieldRef<"Gol", 'String'>
    readonly jogadorId: FieldRef<"Gol", 'String'>
    readonly jogoId: FieldRef<"Gol", 'String'>
    readonly minuto: FieldRef<"Gol", 'Int'>
    readonly createdAt: FieldRef<"Gol", 'DateTime'>
    readonly updatedAt: FieldRef<"Gol", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Gol findUnique
   */
  export type GolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * Filter, which Gol to fetch.
     */
    where: GolWhereUniqueInput
  }

  /**
   * Gol findUniqueOrThrow
   */
  export type GolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * Filter, which Gol to fetch.
     */
    where: GolWhereUniqueInput
  }

  /**
   * Gol findFirst
   */
  export type GolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * Filter, which Gol to fetch.
     */
    where?: GolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gols to fetch.
     */
    orderBy?: GolOrderByWithRelationInput | GolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gols.
     */
    cursor?: GolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gols.
     */
    distinct?: GolScalarFieldEnum | GolScalarFieldEnum[]
  }

  /**
   * Gol findFirstOrThrow
   */
  export type GolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * Filter, which Gol to fetch.
     */
    where?: GolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gols to fetch.
     */
    orderBy?: GolOrderByWithRelationInput | GolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gols.
     */
    cursor?: GolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gols.
     */
    distinct?: GolScalarFieldEnum | GolScalarFieldEnum[]
  }

  /**
   * Gol findMany
   */
  export type GolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * Filter, which Gols to fetch.
     */
    where?: GolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gols to fetch.
     */
    orderBy?: GolOrderByWithRelationInput | GolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gols.
     */
    cursor?: GolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gols.
     */
    skip?: number
    distinct?: GolScalarFieldEnum | GolScalarFieldEnum[]
  }

  /**
   * Gol create
   */
  export type GolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * The data needed to create a Gol.
     */
    data: XOR<GolCreateInput, GolUncheckedCreateInput>
  }

  /**
   * Gol createMany
   */
  export type GolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gols.
     */
    data: GolCreateManyInput | GolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gol createManyAndReturn
   */
  export type GolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * The data used to create many Gols.
     */
    data: GolCreateManyInput | GolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gol update
   */
  export type GolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * The data needed to update a Gol.
     */
    data: XOR<GolUpdateInput, GolUncheckedUpdateInput>
    /**
     * Choose, which Gol to update.
     */
    where: GolWhereUniqueInput
  }

  /**
   * Gol updateMany
   */
  export type GolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gols.
     */
    data: XOR<GolUpdateManyMutationInput, GolUncheckedUpdateManyInput>
    /**
     * Filter which Gols to update
     */
    where?: GolWhereInput
    /**
     * Limit how many Gols to update.
     */
    limit?: number
  }

  /**
   * Gol updateManyAndReturn
   */
  export type GolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * The data used to update Gols.
     */
    data: XOR<GolUpdateManyMutationInput, GolUncheckedUpdateManyInput>
    /**
     * Filter which Gols to update
     */
    where?: GolWhereInput
    /**
     * Limit how many Gols to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gol upsert
   */
  export type GolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * The filter to search for the Gol to update in case it exists.
     */
    where: GolWhereUniqueInput
    /**
     * In case the Gol found by the `where` argument doesn't exist, create a new Gol with this data.
     */
    create: XOR<GolCreateInput, GolUncheckedCreateInput>
    /**
     * In case the Gol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GolUpdateInput, GolUncheckedUpdateInput>
  }

  /**
   * Gol delete
   */
  export type GolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
    /**
     * Filter which Gol to delete.
     */
    where: GolWhereUniqueInput
  }

  /**
   * Gol deleteMany
   */
  export type GolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gols to delete
     */
    where?: GolWhereInput
    /**
     * Limit how many Gols to delete.
     */
    limit?: number
  }

  /**
   * Gol without action
   */
  export type GolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gol
     */
    select?: GolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gol
     */
    omit?: GolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    email: string | null
    senha: string | null
    createdAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    email: string | null
    senha: string | null
    createdAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    createdAt: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    createdAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    createdAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    createdAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    email: string
    senha: string
    createdAt: Date
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
    LogAdmin?: boolean | Admin$LogAdminArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "senha" | "createdAt", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LogAdmin?: boolean | Admin$LogAdminArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      LogAdmin: Prisma.$LogAdminPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      senha: string
      createdAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    LogAdmin<T extends Admin$LogAdminArgs<ExtArgs> = {}>(args?: Subset<T, Admin$LogAdminArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly senha: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin.LogAdmin
   */
  export type Admin$LogAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    where?: LogAdminWhereInput
    orderBy?: LogAdminOrderByWithRelationInput | LogAdminOrderByWithRelationInput[]
    cursor?: LogAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogAdminScalarFieldEnum | LogAdminScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model LogAdmin
   */

  export type AggregateLogAdmin = {
    _count: LogAdminCountAggregateOutputType | null
    _min: LogAdminMinAggregateOutputType | null
    _max: LogAdminMaxAggregateOutputType | null
  }

  export type LogAdminMinAggregateOutputType = {
    id: string | null
    adminId: string | null
    acao: string | null
    data: Date | null
    updatedAt: Date | null
  }

  export type LogAdminMaxAggregateOutputType = {
    id: string | null
    adminId: string | null
    acao: string | null
    data: Date | null
    updatedAt: Date | null
  }

  export type LogAdminCountAggregateOutputType = {
    id: number
    adminId: number
    acao: number
    data: number
    updatedAt: number
    _all: number
  }


  export type LogAdminMinAggregateInputType = {
    id?: true
    adminId?: true
    acao?: true
    data?: true
    updatedAt?: true
  }

  export type LogAdminMaxAggregateInputType = {
    id?: true
    adminId?: true
    acao?: true
    data?: true
    updatedAt?: true
  }

  export type LogAdminCountAggregateInputType = {
    id?: true
    adminId?: true
    acao?: true
    data?: true
    updatedAt?: true
    _all?: true
  }

  export type LogAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogAdmin to aggregate.
     */
    where?: LogAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAdmins to fetch.
     */
    orderBy?: LogAdminOrderByWithRelationInput | LogAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogAdmins
    **/
    _count?: true | LogAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogAdminMaxAggregateInputType
  }

  export type GetLogAdminAggregateType<T extends LogAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateLogAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogAdmin[P]>
      : GetScalarType<T[P], AggregateLogAdmin[P]>
  }




  export type LogAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogAdminWhereInput
    orderBy?: LogAdminOrderByWithAggregationInput | LogAdminOrderByWithAggregationInput[]
    by: LogAdminScalarFieldEnum[] | LogAdminScalarFieldEnum
    having?: LogAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogAdminCountAggregateInputType | true
    _min?: LogAdminMinAggregateInputType
    _max?: LogAdminMaxAggregateInputType
  }

  export type LogAdminGroupByOutputType = {
    id: string
    adminId: string
    acao: string
    data: Date
    updatedAt: Date
    _count: LogAdminCountAggregateOutputType | null
    _min: LogAdminMinAggregateOutputType | null
    _max: LogAdminMaxAggregateOutputType | null
  }

  type GetLogAdminGroupByPayload<T extends LogAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogAdminGroupByOutputType[P]>
            : GetScalarType<T[P], LogAdminGroupByOutputType[P]>
        }
      >
    >


  export type LogAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    acao?: boolean
    data?: boolean
    updatedAt?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logAdmin"]>

  export type LogAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    acao?: boolean
    data?: boolean
    updatedAt?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logAdmin"]>

  export type LogAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    acao?: boolean
    data?: boolean
    updatedAt?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logAdmin"]>

  export type LogAdminSelectScalar = {
    id?: boolean
    adminId?: boolean
    acao?: boolean
    data?: boolean
    updatedAt?: boolean
  }

  export type LogAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "acao" | "data" | "updatedAt", ExtArgs["result"]["logAdmin"]>
  export type LogAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type LogAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type LogAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $LogAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogAdmin"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminId: string
      acao: string
      data: Date
      updatedAt: Date
    }, ExtArgs["result"]["logAdmin"]>
    composites: {}
  }

  type LogAdminGetPayload<S extends boolean | null | undefined | LogAdminDefaultArgs> = $Result.GetResult<Prisma.$LogAdminPayload, S>

  type LogAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogAdminCountAggregateInputType | true
    }

  export interface LogAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogAdmin'], meta: { name: 'LogAdmin' } }
    /**
     * Find zero or one LogAdmin that matches the filter.
     * @param {LogAdminFindUniqueArgs} args - Arguments to find a LogAdmin
     * @example
     * // Get one LogAdmin
     * const logAdmin = await prisma.logAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogAdminFindUniqueArgs>(args: SelectSubset<T, LogAdminFindUniqueArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LogAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogAdminFindUniqueOrThrowArgs} args - Arguments to find a LogAdmin
     * @example
     * // Get one LogAdmin
     * const logAdmin = await prisma.logAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, LogAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminFindFirstArgs} args - Arguments to find a LogAdmin
     * @example
     * // Get one LogAdmin
     * const logAdmin = await prisma.logAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogAdminFindFirstArgs>(args?: SelectSubset<T, LogAdminFindFirstArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminFindFirstOrThrowArgs} args - Arguments to find a LogAdmin
     * @example
     * // Get one LogAdmin
     * const logAdmin = await prisma.logAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, LogAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LogAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogAdmins
     * const logAdmins = await prisma.logAdmin.findMany()
     * 
     * // Get first 10 LogAdmins
     * const logAdmins = await prisma.logAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logAdminWithIdOnly = await prisma.logAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogAdminFindManyArgs>(args?: SelectSubset<T, LogAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LogAdmin.
     * @param {LogAdminCreateArgs} args - Arguments to create a LogAdmin.
     * @example
     * // Create one LogAdmin
     * const LogAdmin = await prisma.logAdmin.create({
     *   data: {
     *     // ... data to create a LogAdmin
     *   }
     * })
     * 
     */
    create<T extends LogAdminCreateArgs>(args: SelectSubset<T, LogAdminCreateArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LogAdmins.
     * @param {LogAdminCreateManyArgs} args - Arguments to create many LogAdmins.
     * @example
     * // Create many LogAdmins
     * const logAdmin = await prisma.logAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogAdminCreateManyArgs>(args?: SelectSubset<T, LogAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogAdmins and returns the data saved in the database.
     * @param {LogAdminCreateManyAndReturnArgs} args - Arguments to create many LogAdmins.
     * @example
     * // Create many LogAdmins
     * const logAdmin = await prisma.logAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogAdmins and only return the `id`
     * const logAdminWithIdOnly = await prisma.logAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, LogAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LogAdmin.
     * @param {LogAdminDeleteArgs} args - Arguments to delete one LogAdmin.
     * @example
     * // Delete one LogAdmin
     * const LogAdmin = await prisma.logAdmin.delete({
     *   where: {
     *     // ... filter to delete one LogAdmin
     *   }
     * })
     * 
     */
    delete<T extends LogAdminDeleteArgs>(args: SelectSubset<T, LogAdminDeleteArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LogAdmin.
     * @param {LogAdminUpdateArgs} args - Arguments to update one LogAdmin.
     * @example
     * // Update one LogAdmin
     * const logAdmin = await prisma.logAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogAdminUpdateArgs>(args: SelectSubset<T, LogAdminUpdateArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LogAdmins.
     * @param {LogAdminDeleteManyArgs} args - Arguments to filter LogAdmins to delete.
     * @example
     * // Delete a few LogAdmins
     * const { count } = await prisma.logAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogAdminDeleteManyArgs>(args?: SelectSubset<T, LogAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogAdmins
     * const logAdmin = await prisma.logAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogAdminUpdateManyArgs>(args: SelectSubset<T, LogAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogAdmins and returns the data updated in the database.
     * @param {LogAdminUpdateManyAndReturnArgs} args - Arguments to update many LogAdmins.
     * @example
     * // Update many LogAdmins
     * const logAdmin = await prisma.logAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LogAdmins and only return the `id`
     * const logAdminWithIdOnly = await prisma.logAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, LogAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LogAdmin.
     * @param {LogAdminUpsertArgs} args - Arguments to update or create a LogAdmin.
     * @example
     * // Update or create a LogAdmin
     * const logAdmin = await prisma.logAdmin.upsert({
     *   create: {
     *     // ... data to create a LogAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogAdmin we want to update
     *   }
     * })
     */
    upsert<T extends LogAdminUpsertArgs>(args: SelectSubset<T, LogAdminUpsertArgs<ExtArgs>>): Prisma__LogAdminClient<$Result.GetResult<Prisma.$LogAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LogAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminCountArgs} args - Arguments to filter LogAdmins to count.
     * @example
     * // Count the number of LogAdmins
     * const count = await prisma.logAdmin.count({
     *   where: {
     *     // ... the filter for the LogAdmins we want to count
     *   }
     * })
    **/
    count<T extends LogAdminCountArgs>(
      args?: Subset<T, LogAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAdminAggregateArgs>(args: Subset<T, LogAdminAggregateArgs>): Prisma.PrismaPromise<GetLogAdminAggregateType<T>>

    /**
     * Group by LogAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogAdminGroupByArgs['orderBy'] }
        : { orderBy?: LogAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogAdmin model
   */
  readonly fields: LogAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogAdmin model
   */
  interface LogAdminFieldRefs {
    readonly id: FieldRef<"LogAdmin", 'String'>
    readonly adminId: FieldRef<"LogAdmin", 'String'>
    readonly acao: FieldRef<"LogAdmin", 'String'>
    readonly data: FieldRef<"LogAdmin", 'DateTime'>
    readonly updatedAt: FieldRef<"LogAdmin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LogAdmin findUnique
   */
  export type LogAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * Filter, which LogAdmin to fetch.
     */
    where: LogAdminWhereUniqueInput
  }

  /**
   * LogAdmin findUniqueOrThrow
   */
  export type LogAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * Filter, which LogAdmin to fetch.
     */
    where: LogAdminWhereUniqueInput
  }

  /**
   * LogAdmin findFirst
   */
  export type LogAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * Filter, which LogAdmin to fetch.
     */
    where?: LogAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAdmins to fetch.
     */
    orderBy?: LogAdminOrderByWithRelationInput | LogAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogAdmins.
     */
    cursor?: LogAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogAdmins.
     */
    distinct?: LogAdminScalarFieldEnum | LogAdminScalarFieldEnum[]
  }

  /**
   * LogAdmin findFirstOrThrow
   */
  export type LogAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * Filter, which LogAdmin to fetch.
     */
    where?: LogAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAdmins to fetch.
     */
    orderBy?: LogAdminOrderByWithRelationInput | LogAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogAdmins.
     */
    cursor?: LogAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogAdmins.
     */
    distinct?: LogAdminScalarFieldEnum | LogAdminScalarFieldEnum[]
  }

  /**
   * LogAdmin findMany
   */
  export type LogAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * Filter, which LogAdmins to fetch.
     */
    where?: LogAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAdmins to fetch.
     */
    orderBy?: LogAdminOrderByWithRelationInput | LogAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogAdmins.
     */
    cursor?: LogAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAdmins.
     */
    skip?: number
    distinct?: LogAdminScalarFieldEnum | LogAdminScalarFieldEnum[]
  }

  /**
   * LogAdmin create
   */
  export type LogAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a LogAdmin.
     */
    data: XOR<LogAdminCreateInput, LogAdminUncheckedCreateInput>
  }

  /**
   * LogAdmin createMany
   */
  export type LogAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogAdmins.
     */
    data: LogAdminCreateManyInput | LogAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogAdmin createManyAndReturn
   */
  export type LogAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * The data used to create many LogAdmins.
     */
    data: LogAdminCreateManyInput | LogAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogAdmin update
   */
  export type LogAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a LogAdmin.
     */
    data: XOR<LogAdminUpdateInput, LogAdminUncheckedUpdateInput>
    /**
     * Choose, which LogAdmin to update.
     */
    where: LogAdminWhereUniqueInput
  }

  /**
   * LogAdmin updateMany
   */
  export type LogAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogAdmins.
     */
    data: XOR<LogAdminUpdateManyMutationInput, LogAdminUncheckedUpdateManyInput>
    /**
     * Filter which LogAdmins to update
     */
    where?: LogAdminWhereInput
    /**
     * Limit how many LogAdmins to update.
     */
    limit?: number
  }

  /**
   * LogAdmin updateManyAndReturn
   */
  export type LogAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * The data used to update LogAdmins.
     */
    data: XOR<LogAdminUpdateManyMutationInput, LogAdminUncheckedUpdateManyInput>
    /**
     * Filter which LogAdmins to update
     */
    where?: LogAdminWhereInput
    /**
     * Limit how many LogAdmins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogAdmin upsert
   */
  export type LogAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the LogAdmin to update in case it exists.
     */
    where: LogAdminWhereUniqueInput
    /**
     * In case the LogAdmin found by the `where` argument doesn't exist, create a new LogAdmin with this data.
     */
    create: XOR<LogAdminCreateInput, LogAdminUncheckedCreateInput>
    /**
     * In case the LogAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogAdminUpdateInput, LogAdminUncheckedUpdateInput>
  }

  /**
   * LogAdmin delete
   */
  export type LogAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
    /**
     * Filter which LogAdmin to delete.
     */
    where: LogAdminWhereUniqueInput
  }

  /**
   * LogAdmin deleteMany
   */
  export type LogAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogAdmins to delete
     */
    where?: LogAdminWhereInput
    /**
     * Limit how many LogAdmins to delete.
     */
    limit?: number
  }

  /**
   * LogAdmin without action
   */
  export type LogAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAdmin
     */
    select?: LogAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogAdmin
     */
    omit?: LogAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAdminInclude<ExtArgs> | null
  }


  /**
   * Model InscricaoEquipe
   */

  export type AggregateInscricaoEquipe = {
    _count: InscricaoEquipeCountAggregateOutputType | null
    _min: InscricaoEquipeMinAggregateOutputType | null
    _max: InscricaoEquipeMaxAggregateOutputType | null
  }

  export type InscricaoEquipeMinAggregateOutputType = {
    id: string | null
    nome: string | null
    contato: string | null
    capitao: string | null
    aceiteRegulamento: boolean | null
    status: $Enums.StatusInscricao | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InscricaoEquipeMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    contato: string | null
    capitao: string | null
    aceiteRegulamento: boolean | null
    status: $Enums.StatusInscricao | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InscricaoEquipeCountAggregateOutputType = {
    id: number
    nome: number
    contato: number
    capitao: number
    aceiteRegulamento: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InscricaoEquipeMinAggregateInputType = {
    id?: true
    nome?: true
    contato?: true
    capitao?: true
    aceiteRegulamento?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InscricaoEquipeMaxAggregateInputType = {
    id?: true
    nome?: true
    contato?: true
    capitao?: true
    aceiteRegulamento?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InscricaoEquipeCountAggregateInputType = {
    id?: true
    nome?: true
    contato?: true
    capitao?: true
    aceiteRegulamento?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InscricaoEquipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InscricaoEquipe to aggregate.
     */
    where?: InscricaoEquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoEquipes to fetch.
     */
    orderBy?: InscricaoEquipeOrderByWithRelationInput | InscricaoEquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InscricaoEquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoEquipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoEquipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InscricaoEquipes
    **/
    _count?: true | InscricaoEquipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InscricaoEquipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InscricaoEquipeMaxAggregateInputType
  }

  export type GetInscricaoEquipeAggregateType<T extends InscricaoEquipeAggregateArgs> = {
        [P in keyof T & keyof AggregateInscricaoEquipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInscricaoEquipe[P]>
      : GetScalarType<T[P], AggregateInscricaoEquipe[P]>
  }




  export type InscricaoEquipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscricaoEquipeWhereInput
    orderBy?: InscricaoEquipeOrderByWithAggregationInput | InscricaoEquipeOrderByWithAggregationInput[]
    by: InscricaoEquipeScalarFieldEnum[] | InscricaoEquipeScalarFieldEnum
    having?: InscricaoEquipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InscricaoEquipeCountAggregateInputType | true
    _min?: InscricaoEquipeMinAggregateInputType
    _max?: InscricaoEquipeMaxAggregateInputType
  }

  export type InscricaoEquipeGroupByOutputType = {
    id: string
    nome: string
    contato: string
    capitao: string
    aceiteRegulamento: boolean
    status: $Enums.StatusInscricao
    createdAt: Date
    updatedAt: Date
    _count: InscricaoEquipeCountAggregateOutputType | null
    _min: InscricaoEquipeMinAggregateOutputType | null
    _max: InscricaoEquipeMaxAggregateOutputType | null
  }

  type GetInscricaoEquipeGroupByPayload<T extends InscricaoEquipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InscricaoEquipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InscricaoEquipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InscricaoEquipeGroupByOutputType[P]>
            : GetScalarType<T[P], InscricaoEquipeGroupByOutputType[P]>
        }
      >
    >


  export type InscricaoEquipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jogadores?: boolean | InscricaoEquipe$jogadoresArgs<ExtArgs>
    _count?: boolean | InscricaoEquipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscricaoEquipe"]>

  export type InscricaoEquipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["inscricaoEquipe"]>

  export type InscricaoEquipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["inscricaoEquipe"]>

  export type InscricaoEquipeSelectScalar = {
    id?: boolean
    nome?: boolean
    contato?: boolean
    capitao?: boolean
    aceiteRegulamento?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InscricaoEquipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "contato" | "capitao" | "aceiteRegulamento" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["inscricaoEquipe"]>
  export type InscricaoEquipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jogadores?: boolean | InscricaoEquipe$jogadoresArgs<ExtArgs>
    _count?: boolean | InscricaoEquipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InscricaoEquipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InscricaoEquipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InscricaoEquipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InscricaoEquipe"
    objects: {
      jogadores: Prisma.$InscricaoJogadorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      contato: string
      capitao: string
      aceiteRegulamento: boolean
      status: $Enums.StatusInscricao
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inscricaoEquipe"]>
    composites: {}
  }

  type InscricaoEquipeGetPayload<S extends boolean | null | undefined | InscricaoEquipeDefaultArgs> = $Result.GetResult<Prisma.$InscricaoEquipePayload, S>

  type InscricaoEquipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InscricaoEquipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InscricaoEquipeCountAggregateInputType | true
    }

  export interface InscricaoEquipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InscricaoEquipe'], meta: { name: 'InscricaoEquipe' } }
    /**
     * Find zero or one InscricaoEquipe that matches the filter.
     * @param {InscricaoEquipeFindUniqueArgs} args - Arguments to find a InscricaoEquipe
     * @example
     * // Get one InscricaoEquipe
     * const inscricaoEquipe = await prisma.inscricaoEquipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InscricaoEquipeFindUniqueArgs>(args: SelectSubset<T, InscricaoEquipeFindUniqueArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InscricaoEquipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InscricaoEquipeFindUniqueOrThrowArgs} args - Arguments to find a InscricaoEquipe
     * @example
     * // Get one InscricaoEquipe
     * const inscricaoEquipe = await prisma.inscricaoEquipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InscricaoEquipeFindUniqueOrThrowArgs>(args: SelectSubset<T, InscricaoEquipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InscricaoEquipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeFindFirstArgs} args - Arguments to find a InscricaoEquipe
     * @example
     * // Get one InscricaoEquipe
     * const inscricaoEquipe = await prisma.inscricaoEquipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InscricaoEquipeFindFirstArgs>(args?: SelectSubset<T, InscricaoEquipeFindFirstArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InscricaoEquipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeFindFirstOrThrowArgs} args - Arguments to find a InscricaoEquipe
     * @example
     * // Get one InscricaoEquipe
     * const inscricaoEquipe = await prisma.inscricaoEquipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InscricaoEquipeFindFirstOrThrowArgs>(args?: SelectSubset<T, InscricaoEquipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InscricaoEquipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InscricaoEquipes
     * const inscricaoEquipes = await prisma.inscricaoEquipe.findMany()
     * 
     * // Get first 10 InscricaoEquipes
     * const inscricaoEquipes = await prisma.inscricaoEquipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inscricaoEquipeWithIdOnly = await prisma.inscricaoEquipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InscricaoEquipeFindManyArgs>(args?: SelectSubset<T, InscricaoEquipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InscricaoEquipe.
     * @param {InscricaoEquipeCreateArgs} args - Arguments to create a InscricaoEquipe.
     * @example
     * // Create one InscricaoEquipe
     * const InscricaoEquipe = await prisma.inscricaoEquipe.create({
     *   data: {
     *     // ... data to create a InscricaoEquipe
     *   }
     * })
     * 
     */
    create<T extends InscricaoEquipeCreateArgs>(args: SelectSubset<T, InscricaoEquipeCreateArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InscricaoEquipes.
     * @param {InscricaoEquipeCreateManyArgs} args - Arguments to create many InscricaoEquipes.
     * @example
     * // Create many InscricaoEquipes
     * const inscricaoEquipe = await prisma.inscricaoEquipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InscricaoEquipeCreateManyArgs>(args?: SelectSubset<T, InscricaoEquipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InscricaoEquipes and returns the data saved in the database.
     * @param {InscricaoEquipeCreateManyAndReturnArgs} args - Arguments to create many InscricaoEquipes.
     * @example
     * // Create many InscricaoEquipes
     * const inscricaoEquipe = await prisma.inscricaoEquipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InscricaoEquipes and only return the `id`
     * const inscricaoEquipeWithIdOnly = await prisma.inscricaoEquipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InscricaoEquipeCreateManyAndReturnArgs>(args?: SelectSubset<T, InscricaoEquipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InscricaoEquipe.
     * @param {InscricaoEquipeDeleteArgs} args - Arguments to delete one InscricaoEquipe.
     * @example
     * // Delete one InscricaoEquipe
     * const InscricaoEquipe = await prisma.inscricaoEquipe.delete({
     *   where: {
     *     // ... filter to delete one InscricaoEquipe
     *   }
     * })
     * 
     */
    delete<T extends InscricaoEquipeDeleteArgs>(args: SelectSubset<T, InscricaoEquipeDeleteArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InscricaoEquipe.
     * @param {InscricaoEquipeUpdateArgs} args - Arguments to update one InscricaoEquipe.
     * @example
     * // Update one InscricaoEquipe
     * const inscricaoEquipe = await prisma.inscricaoEquipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InscricaoEquipeUpdateArgs>(args: SelectSubset<T, InscricaoEquipeUpdateArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InscricaoEquipes.
     * @param {InscricaoEquipeDeleteManyArgs} args - Arguments to filter InscricaoEquipes to delete.
     * @example
     * // Delete a few InscricaoEquipes
     * const { count } = await prisma.inscricaoEquipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InscricaoEquipeDeleteManyArgs>(args?: SelectSubset<T, InscricaoEquipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InscricaoEquipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InscricaoEquipes
     * const inscricaoEquipe = await prisma.inscricaoEquipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InscricaoEquipeUpdateManyArgs>(args: SelectSubset<T, InscricaoEquipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InscricaoEquipes and returns the data updated in the database.
     * @param {InscricaoEquipeUpdateManyAndReturnArgs} args - Arguments to update many InscricaoEquipes.
     * @example
     * // Update many InscricaoEquipes
     * const inscricaoEquipe = await prisma.inscricaoEquipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InscricaoEquipes and only return the `id`
     * const inscricaoEquipeWithIdOnly = await prisma.inscricaoEquipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InscricaoEquipeUpdateManyAndReturnArgs>(args: SelectSubset<T, InscricaoEquipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InscricaoEquipe.
     * @param {InscricaoEquipeUpsertArgs} args - Arguments to update or create a InscricaoEquipe.
     * @example
     * // Update or create a InscricaoEquipe
     * const inscricaoEquipe = await prisma.inscricaoEquipe.upsert({
     *   create: {
     *     // ... data to create a InscricaoEquipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InscricaoEquipe we want to update
     *   }
     * })
     */
    upsert<T extends InscricaoEquipeUpsertArgs>(args: SelectSubset<T, InscricaoEquipeUpsertArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InscricaoEquipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeCountArgs} args - Arguments to filter InscricaoEquipes to count.
     * @example
     * // Count the number of InscricaoEquipes
     * const count = await prisma.inscricaoEquipe.count({
     *   where: {
     *     // ... the filter for the InscricaoEquipes we want to count
     *   }
     * })
    **/
    count<T extends InscricaoEquipeCountArgs>(
      args?: Subset<T, InscricaoEquipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InscricaoEquipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InscricaoEquipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InscricaoEquipeAggregateArgs>(args: Subset<T, InscricaoEquipeAggregateArgs>): Prisma.PrismaPromise<GetInscricaoEquipeAggregateType<T>>

    /**
     * Group by InscricaoEquipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoEquipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InscricaoEquipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InscricaoEquipeGroupByArgs['orderBy'] }
        : { orderBy?: InscricaoEquipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InscricaoEquipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInscricaoEquipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InscricaoEquipe model
   */
  readonly fields: InscricaoEquipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InscricaoEquipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InscricaoEquipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jogadores<T extends InscricaoEquipe$jogadoresArgs<ExtArgs> = {}>(args?: Subset<T, InscricaoEquipe$jogadoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InscricaoEquipe model
   */
  interface InscricaoEquipeFieldRefs {
    readonly id: FieldRef<"InscricaoEquipe", 'String'>
    readonly nome: FieldRef<"InscricaoEquipe", 'String'>
    readonly contato: FieldRef<"InscricaoEquipe", 'String'>
    readonly capitao: FieldRef<"InscricaoEquipe", 'String'>
    readonly aceiteRegulamento: FieldRef<"InscricaoEquipe", 'Boolean'>
    readonly status: FieldRef<"InscricaoEquipe", 'StatusInscricao'>
    readonly createdAt: FieldRef<"InscricaoEquipe", 'DateTime'>
    readonly updatedAt: FieldRef<"InscricaoEquipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InscricaoEquipe findUnique
   */
  export type InscricaoEquipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoEquipe to fetch.
     */
    where: InscricaoEquipeWhereUniqueInput
  }

  /**
   * InscricaoEquipe findUniqueOrThrow
   */
  export type InscricaoEquipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoEquipe to fetch.
     */
    where: InscricaoEquipeWhereUniqueInput
  }

  /**
   * InscricaoEquipe findFirst
   */
  export type InscricaoEquipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoEquipe to fetch.
     */
    where?: InscricaoEquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoEquipes to fetch.
     */
    orderBy?: InscricaoEquipeOrderByWithRelationInput | InscricaoEquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InscricaoEquipes.
     */
    cursor?: InscricaoEquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoEquipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoEquipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InscricaoEquipes.
     */
    distinct?: InscricaoEquipeScalarFieldEnum | InscricaoEquipeScalarFieldEnum[]
  }

  /**
   * InscricaoEquipe findFirstOrThrow
   */
  export type InscricaoEquipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoEquipe to fetch.
     */
    where?: InscricaoEquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoEquipes to fetch.
     */
    orderBy?: InscricaoEquipeOrderByWithRelationInput | InscricaoEquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InscricaoEquipes.
     */
    cursor?: InscricaoEquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoEquipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoEquipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InscricaoEquipes.
     */
    distinct?: InscricaoEquipeScalarFieldEnum | InscricaoEquipeScalarFieldEnum[]
  }

  /**
   * InscricaoEquipe findMany
   */
  export type InscricaoEquipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoEquipes to fetch.
     */
    where?: InscricaoEquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoEquipes to fetch.
     */
    orderBy?: InscricaoEquipeOrderByWithRelationInput | InscricaoEquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InscricaoEquipes.
     */
    cursor?: InscricaoEquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoEquipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoEquipes.
     */
    skip?: number
    distinct?: InscricaoEquipeScalarFieldEnum | InscricaoEquipeScalarFieldEnum[]
  }

  /**
   * InscricaoEquipe create
   */
  export type InscricaoEquipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * The data needed to create a InscricaoEquipe.
     */
    data: XOR<InscricaoEquipeCreateInput, InscricaoEquipeUncheckedCreateInput>
  }

  /**
   * InscricaoEquipe createMany
   */
  export type InscricaoEquipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InscricaoEquipes.
     */
    data: InscricaoEquipeCreateManyInput | InscricaoEquipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InscricaoEquipe createManyAndReturn
   */
  export type InscricaoEquipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * The data used to create many InscricaoEquipes.
     */
    data: InscricaoEquipeCreateManyInput | InscricaoEquipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InscricaoEquipe update
   */
  export type InscricaoEquipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * The data needed to update a InscricaoEquipe.
     */
    data: XOR<InscricaoEquipeUpdateInput, InscricaoEquipeUncheckedUpdateInput>
    /**
     * Choose, which InscricaoEquipe to update.
     */
    where: InscricaoEquipeWhereUniqueInput
  }

  /**
   * InscricaoEquipe updateMany
   */
  export type InscricaoEquipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InscricaoEquipes.
     */
    data: XOR<InscricaoEquipeUpdateManyMutationInput, InscricaoEquipeUncheckedUpdateManyInput>
    /**
     * Filter which InscricaoEquipes to update
     */
    where?: InscricaoEquipeWhereInput
    /**
     * Limit how many InscricaoEquipes to update.
     */
    limit?: number
  }

  /**
   * InscricaoEquipe updateManyAndReturn
   */
  export type InscricaoEquipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * The data used to update InscricaoEquipes.
     */
    data: XOR<InscricaoEquipeUpdateManyMutationInput, InscricaoEquipeUncheckedUpdateManyInput>
    /**
     * Filter which InscricaoEquipes to update
     */
    where?: InscricaoEquipeWhereInput
    /**
     * Limit how many InscricaoEquipes to update.
     */
    limit?: number
  }

  /**
   * InscricaoEquipe upsert
   */
  export type InscricaoEquipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * The filter to search for the InscricaoEquipe to update in case it exists.
     */
    where: InscricaoEquipeWhereUniqueInput
    /**
     * In case the InscricaoEquipe found by the `where` argument doesn't exist, create a new InscricaoEquipe with this data.
     */
    create: XOR<InscricaoEquipeCreateInput, InscricaoEquipeUncheckedCreateInput>
    /**
     * In case the InscricaoEquipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InscricaoEquipeUpdateInput, InscricaoEquipeUncheckedUpdateInput>
  }

  /**
   * InscricaoEquipe delete
   */
  export type InscricaoEquipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
    /**
     * Filter which InscricaoEquipe to delete.
     */
    where: InscricaoEquipeWhereUniqueInput
  }

  /**
   * InscricaoEquipe deleteMany
   */
  export type InscricaoEquipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InscricaoEquipes to delete
     */
    where?: InscricaoEquipeWhereInput
    /**
     * Limit how many InscricaoEquipes to delete.
     */
    limit?: number
  }

  /**
   * InscricaoEquipe.jogadores
   */
  export type InscricaoEquipe$jogadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    where?: InscricaoJogadorWhereInput
    orderBy?: InscricaoJogadorOrderByWithRelationInput | InscricaoJogadorOrderByWithRelationInput[]
    cursor?: InscricaoJogadorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InscricaoJogadorScalarFieldEnum | InscricaoJogadorScalarFieldEnum[]
  }

  /**
   * InscricaoEquipe without action
   */
  export type InscricaoEquipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoEquipe
     */
    select?: InscricaoEquipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoEquipe
     */
    omit?: InscricaoEquipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoEquipeInclude<ExtArgs> | null
  }


  /**
   * Model InscricaoJogador
   */

  export type AggregateInscricaoJogador = {
    _count: InscricaoJogadorCountAggregateOutputType | null
    _avg: InscricaoJogadorAvgAggregateOutputType | null
    _sum: InscricaoJogadorSumAggregateOutputType | null
    _min: InscricaoJogadorMinAggregateOutputType | null
    _max: InscricaoJogadorMaxAggregateOutputType | null
  }

  export type InscricaoJogadorAvgAggregateOutputType = {
    numero: number | null
  }

  export type InscricaoJogadorSumAggregateOutputType = {
    numero: number | null
  }

  export type InscricaoJogadorMinAggregateOutputType = {
    id: string | null
    nome: string | null
    posicao: string | null
    numero: number | null
    inscricaoEquipeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InscricaoJogadorMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    posicao: string | null
    numero: number | null
    inscricaoEquipeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InscricaoJogadorCountAggregateOutputType = {
    id: number
    nome: number
    posicao: number
    numero: number
    inscricaoEquipeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InscricaoJogadorAvgAggregateInputType = {
    numero?: true
  }

  export type InscricaoJogadorSumAggregateInputType = {
    numero?: true
  }

  export type InscricaoJogadorMinAggregateInputType = {
    id?: true
    nome?: true
    posicao?: true
    numero?: true
    inscricaoEquipeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InscricaoJogadorMaxAggregateInputType = {
    id?: true
    nome?: true
    posicao?: true
    numero?: true
    inscricaoEquipeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InscricaoJogadorCountAggregateInputType = {
    id?: true
    nome?: true
    posicao?: true
    numero?: true
    inscricaoEquipeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InscricaoJogadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InscricaoJogador to aggregate.
     */
    where?: InscricaoJogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoJogadors to fetch.
     */
    orderBy?: InscricaoJogadorOrderByWithRelationInput | InscricaoJogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InscricaoJogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoJogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoJogadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InscricaoJogadors
    **/
    _count?: true | InscricaoJogadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InscricaoJogadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InscricaoJogadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InscricaoJogadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InscricaoJogadorMaxAggregateInputType
  }

  export type GetInscricaoJogadorAggregateType<T extends InscricaoJogadorAggregateArgs> = {
        [P in keyof T & keyof AggregateInscricaoJogador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInscricaoJogador[P]>
      : GetScalarType<T[P], AggregateInscricaoJogador[P]>
  }




  export type InscricaoJogadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscricaoJogadorWhereInput
    orderBy?: InscricaoJogadorOrderByWithAggregationInput | InscricaoJogadorOrderByWithAggregationInput[]
    by: InscricaoJogadorScalarFieldEnum[] | InscricaoJogadorScalarFieldEnum
    having?: InscricaoJogadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InscricaoJogadorCountAggregateInputType | true
    _avg?: InscricaoJogadorAvgAggregateInputType
    _sum?: InscricaoJogadorSumAggregateInputType
    _min?: InscricaoJogadorMinAggregateInputType
    _max?: InscricaoJogadorMaxAggregateInputType
  }

  export type InscricaoJogadorGroupByOutputType = {
    id: string
    nome: string
    posicao: string
    numero: number
    inscricaoEquipeId: string
    createdAt: Date
    updatedAt: Date
    _count: InscricaoJogadorCountAggregateOutputType | null
    _avg: InscricaoJogadorAvgAggregateOutputType | null
    _sum: InscricaoJogadorSumAggregateOutputType | null
    _min: InscricaoJogadorMinAggregateOutputType | null
    _max: InscricaoJogadorMaxAggregateOutputType | null
  }

  type GetInscricaoJogadorGroupByPayload<T extends InscricaoJogadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InscricaoJogadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InscricaoJogadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InscricaoJogadorGroupByOutputType[P]>
            : GetScalarType<T[P], InscricaoJogadorGroupByOutputType[P]>
        }
      >
    >


  export type InscricaoJogadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    inscricaoEquipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inscricaoEquipe?: boolean | InscricaoEquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscricaoJogador"]>

  export type InscricaoJogadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    inscricaoEquipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inscricaoEquipe?: boolean | InscricaoEquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscricaoJogador"]>

  export type InscricaoJogadorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    inscricaoEquipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inscricaoEquipe?: boolean | InscricaoEquipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscricaoJogador"]>

  export type InscricaoJogadorSelectScalar = {
    id?: boolean
    nome?: boolean
    posicao?: boolean
    numero?: boolean
    inscricaoEquipeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InscricaoJogadorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "posicao" | "numero" | "inscricaoEquipeId" | "createdAt" | "updatedAt", ExtArgs["result"]["inscricaoJogador"]>
  export type InscricaoJogadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inscricaoEquipe?: boolean | InscricaoEquipeDefaultArgs<ExtArgs>
  }
  export type InscricaoJogadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inscricaoEquipe?: boolean | InscricaoEquipeDefaultArgs<ExtArgs>
  }
  export type InscricaoJogadorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inscricaoEquipe?: boolean | InscricaoEquipeDefaultArgs<ExtArgs>
  }

  export type $InscricaoJogadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InscricaoJogador"
    objects: {
      inscricaoEquipe: Prisma.$InscricaoEquipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      posicao: string
      numero: number
      inscricaoEquipeId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inscricaoJogador"]>
    composites: {}
  }

  type InscricaoJogadorGetPayload<S extends boolean | null | undefined | InscricaoJogadorDefaultArgs> = $Result.GetResult<Prisma.$InscricaoJogadorPayload, S>

  type InscricaoJogadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InscricaoJogadorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InscricaoJogadorCountAggregateInputType | true
    }

  export interface InscricaoJogadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InscricaoJogador'], meta: { name: 'InscricaoJogador' } }
    /**
     * Find zero or one InscricaoJogador that matches the filter.
     * @param {InscricaoJogadorFindUniqueArgs} args - Arguments to find a InscricaoJogador
     * @example
     * // Get one InscricaoJogador
     * const inscricaoJogador = await prisma.inscricaoJogador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InscricaoJogadorFindUniqueArgs>(args: SelectSubset<T, InscricaoJogadorFindUniqueArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InscricaoJogador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InscricaoJogadorFindUniqueOrThrowArgs} args - Arguments to find a InscricaoJogador
     * @example
     * // Get one InscricaoJogador
     * const inscricaoJogador = await prisma.inscricaoJogador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InscricaoJogadorFindUniqueOrThrowArgs>(args: SelectSubset<T, InscricaoJogadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InscricaoJogador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorFindFirstArgs} args - Arguments to find a InscricaoJogador
     * @example
     * // Get one InscricaoJogador
     * const inscricaoJogador = await prisma.inscricaoJogador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InscricaoJogadorFindFirstArgs>(args?: SelectSubset<T, InscricaoJogadorFindFirstArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InscricaoJogador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorFindFirstOrThrowArgs} args - Arguments to find a InscricaoJogador
     * @example
     * // Get one InscricaoJogador
     * const inscricaoJogador = await prisma.inscricaoJogador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InscricaoJogadorFindFirstOrThrowArgs>(args?: SelectSubset<T, InscricaoJogadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InscricaoJogadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InscricaoJogadors
     * const inscricaoJogadors = await prisma.inscricaoJogador.findMany()
     * 
     * // Get first 10 InscricaoJogadors
     * const inscricaoJogadors = await prisma.inscricaoJogador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inscricaoJogadorWithIdOnly = await prisma.inscricaoJogador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InscricaoJogadorFindManyArgs>(args?: SelectSubset<T, InscricaoJogadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InscricaoJogador.
     * @param {InscricaoJogadorCreateArgs} args - Arguments to create a InscricaoJogador.
     * @example
     * // Create one InscricaoJogador
     * const InscricaoJogador = await prisma.inscricaoJogador.create({
     *   data: {
     *     // ... data to create a InscricaoJogador
     *   }
     * })
     * 
     */
    create<T extends InscricaoJogadorCreateArgs>(args: SelectSubset<T, InscricaoJogadorCreateArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InscricaoJogadors.
     * @param {InscricaoJogadorCreateManyArgs} args - Arguments to create many InscricaoJogadors.
     * @example
     * // Create many InscricaoJogadors
     * const inscricaoJogador = await prisma.inscricaoJogador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InscricaoJogadorCreateManyArgs>(args?: SelectSubset<T, InscricaoJogadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InscricaoJogadors and returns the data saved in the database.
     * @param {InscricaoJogadorCreateManyAndReturnArgs} args - Arguments to create many InscricaoJogadors.
     * @example
     * // Create many InscricaoJogadors
     * const inscricaoJogador = await prisma.inscricaoJogador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InscricaoJogadors and only return the `id`
     * const inscricaoJogadorWithIdOnly = await prisma.inscricaoJogador.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InscricaoJogadorCreateManyAndReturnArgs>(args?: SelectSubset<T, InscricaoJogadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InscricaoJogador.
     * @param {InscricaoJogadorDeleteArgs} args - Arguments to delete one InscricaoJogador.
     * @example
     * // Delete one InscricaoJogador
     * const InscricaoJogador = await prisma.inscricaoJogador.delete({
     *   where: {
     *     // ... filter to delete one InscricaoJogador
     *   }
     * })
     * 
     */
    delete<T extends InscricaoJogadorDeleteArgs>(args: SelectSubset<T, InscricaoJogadorDeleteArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InscricaoJogador.
     * @param {InscricaoJogadorUpdateArgs} args - Arguments to update one InscricaoJogador.
     * @example
     * // Update one InscricaoJogador
     * const inscricaoJogador = await prisma.inscricaoJogador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InscricaoJogadorUpdateArgs>(args: SelectSubset<T, InscricaoJogadorUpdateArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InscricaoJogadors.
     * @param {InscricaoJogadorDeleteManyArgs} args - Arguments to filter InscricaoJogadors to delete.
     * @example
     * // Delete a few InscricaoJogadors
     * const { count } = await prisma.inscricaoJogador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InscricaoJogadorDeleteManyArgs>(args?: SelectSubset<T, InscricaoJogadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InscricaoJogadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InscricaoJogadors
     * const inscricaoJogador = await prisma.inscricaoJogador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InscricaoJogadorUpdateManyArgs>(args: SelectSubset<T, InscricaoJogadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InscricaoJogadors and returns the data updated in the database.
     * @param {InscricaoJogadorUpdateManyAndReturnArgs} args - Arguments to update many InscricaoJogadors.
     * @example
     * // Update many InscricaoJogadors
     * const inscricaoJogador = await prisma.inscricaoJogador.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InscricaoJogadors and only return the `id`
     * const inscricaoJogadorWithIdOnly = await prisma.inscricaoJogador.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InscricaoJogadorUpdateManyAndReturnArgs>(args: SelectSubset<T, InscricaoJogadorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InscricaoJogador.
     * @param {InscricaoJogadorUpsertArgs} args - Arguments to update or create a InscricaoJogador.
     * @example
     * // Update or create a InscricaoJogador
     * const inscricaoJogador = await prisma.inscricaoJogador.upsert({
     *   create: {
     *     // ... data to create a InscricaoJogador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InscricaoJogador we want to update
     *   }
     * })
     */
    upsert<T extends InscricaoJogadorUpsertArgs>(args: SelectSubset<T, InscricaoJogadorUpsertArgs<ExtArgs>>): Prisma__InscricaoJogadorClient<$Result.GetResult<Prisma.$InscricaoJogadorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InscricaoJogadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorCountArgs} args - Arguments to filter InscricaoJogadors to count.
     * @example
     * // Count the number of InscricaoJogadors
     * const count = await prisma.inscricaoJogador.count({
     *   where: {
     *     // ... the filter for the InscricaoJogadors we want to count
     *   }
     * })
    **/
    count<T extends InscricaoJogadorCountArgs>(
      args?: Subset<T, InscricaoJogadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InscricaoJogadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InscricaoJogador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InscricaoJogadorAggregateArgs>(args: Subset<T, InscricaoJogadorAggregateArgs>): Prisma.PrismaPromise<GetInscricaoJogadorAggregateType<T>>

    /**
     * Group by InscricaoJogador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscricaoJogadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InscricaoJogadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InscricaoJogadorGroupByArgs['orderBy'] }
        : { orderBy?: InscricaoJogadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InscricaoJogadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInscricaoJogadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InscricaoJogador model
   */
  readonly fields: InscricaoJogadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InscricaoJogador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InscricaoJogadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inscricaoEquipe<T extends InscricaoEquipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InscricaoEquipeDefaultArgs<ExtArgs>>): Prisma__InscricaoEquipeClient<$Result.GetResult<Prisma.$InscricaoEquipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InscricaoJogador model
   */
  interface InscricaoJogadorFieldRefs {
    readonly id: FieldRef<"InscricaoJogador", 'String'>
    readonly nome: FieldRef<"InscricaoJogador", 'String'>
    readonly posicao: FieldRef<"InscricaoJogador", 'String'>
    readonly numero: FieldRef<"InscricaoJogador", 'Int'>
    readonly inscricaoEquipeId: FieldRef<"InscricaoJogador", 'String'>
    readonly createdAt: FieldRef<"InscricaoJogador", 'DateTime'>
    readonly updatedAt: FieldRef<"InscricaoJogador", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InscricaoJogador findUnique
   */
  export type InscricaoJogadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoJogador to fetch.
     */
    where: InscricaoJogadorWhereUniqueInput
  }

  /**
   * InscricaoJogador findUniqueOrThrow
   */
  export type InscricaoJogadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoJogador to fetch.
     */
    where: InscricaoJogadorWhereUniqueInput
  }

  /**
   * InscricaoJogador findFirst
   */
  export type InscricaoJogadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoJogador to fetch.
     */
    where?: InscricaoJogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoJogadors to fetch.
     */
    orderBy?: InscricaoJogadorOrderByWithRelationInput | InscricaoJogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InscricaoJogadors.
     */
    cursor?: InscricaoJogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoJogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoJogadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InscricaoJogadors.
     */
    distinct?: InscricaoJogadorScalarFieldEnum | InscricaoJogadorScalarFieldEnum[]
  }

  /**
   * InscricaoJogador findFirstOrThrow
   */
  export type InscricaoJogadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoJogador to fetch.
     */
    where?: InscricaoJogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoJogadors to fetch.
     */
    orderBy?: InscricaoJogadorOrderByWithRelationInput | InscricaoJogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InscricaoJogadors.
     */
    cursor?: InscricaoJogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoJogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoJogadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InscricaoJogadors.
     */
    distinct?: InscricaoJogadorScalarFieldEnum | InscricaoJogadorScalarFieldEnum[]
  }

  /**
   * InscricaoJogador findMany
   */
  export type InscricaoJogadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * Filter, which InscricaoJogadors to fetch.
     */
    where?: InscricaoJogadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscricaoJogadors to fetch.
     */
    orderBy?: InscricaoJogadorOrderByWithRelationInput | InscricaoJogadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InscricaoJogadors.
     */
    cursor?: InscricaoJogadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscricaoJogadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscricaoJogadors.
     */
    skip?: number
    distinct?: InscricaoJogadorScalarFieldEnum | InscricaoJogadorScalarFieldEnum[]
  }

  /**
   * InscricaoJogador create
   */
  export type InscricaoJogadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * The data needed to create a InscricaoJogador.
     */
    data: XOR<InscricaoJogadorCreateInput, InscricaoJogadorUncheckedCreateInput>
  }

  /**
   * InscricaoJogador createMany
   */
  export type InscricaoJogadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InscricaoJogadors.
     */
    data: InscricaoJogadorCreateManyInput | InscricaoJogadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InscricaoJogador createManyAndReturn
   */
  export type InscricaoJogadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * The data used to create many InscricaoJogadors.
     */
    data: InscricaoJogadorCreateManyInput | InscricaoJogadorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InscricaoJogador update
   */
  export type InscricaoJogadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * The data needed to update a InscricaoJogador.
     */
    data: XOR<InscricaoJogadorUpdateInput, InscricaoJogadorUncheckedUpdateInput>
    /**
     * Choose, which InscricaoJogador to update.
     */
    where: InscricaoJogadorWhereUniqueInput
  }

  /**
   * InscricaoJogador updateMany
   */
  export type InscricaoJogadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InscricaoJogadors.
     */
    data: XOR<InscricaoJogadorUpdateManyMutationInput, InscricaoJogadorUncheckedUpdateManyInput>
    /**
     * Filter which InscricaoJogadors to update
     */
    where?: InscricaoJogadorWhereInput
    /**
     * Limit how many InscricaoJogadors to update.
     */
    limit?: number
  }

  /**
   * InscricaoJogador updateManyAndReturn
   */
  export type InscricaoJogadorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * The data used to update InscricaoJogadors.
     */
    data: XOR<InscricaoJogadorUpdateManyMutationInput, InscricaoJogadorUncheckedUpdateManyInput>
    /**
     * Filter which InscricaoJogadors to update
     */
    where?: InscricaoJogadorWhereInput
    /**
     * Limit how many InscricaoJogadors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InscricaoJogador upsert
   */
  export type InscricaoJogadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * The filter to search for the InscricaoJogador to update in case it exists.
     */
    where: InscricaoJogadorWhereUniqueInput
    /**
     * In case the InscricaoJogador found by the `where` argument doesn't exist, create a new InscricaoJogador with this data.
     */
    create: XOR<InscricaoJogadorCreateInput, InscricaoJogadorUncheckedCreateInput>
    /**
     * In case the InscricaoJogador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InscricaoJogadorUpdateInput, InscricaoJogadorUncheckedUpdateInput>
  }

  /**
   * InscricaoJogador delete
   */
  export type InscricaoJogadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
    /**
     * Filter which InscricaoJogador to delete.
     */
    where: InscricaoJogadorWhereUniqueInput
  }

  /**
   * InscricaoJogador deleteMany
   */
  export type InscricaoJogadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InscricaoJogadors to delete
     */
    where?: InscricaoJogadorWhereInput
    /**
     * Limit how many InscricaoJogadors to delete.
     */
    limit?: number
  }

  /**
   * InscricaoJogador without action
   */
  export type InscricaoJogadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscricaoJogador
     */
    select?: InscricaoJogadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InscricaoJogador
     */
    omit?: InscricaoJogadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscricaoJogadorInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EquipeScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    slug: 'slug',
    contato: 'contato',
    capitao: 'capitao',
    aceiteRegulamento: 'aceiteRegulamento',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EquipeScalarFieldEnum = (typeof EquipeScalarFieldEnum)[keyof typeof EquipeScalarFieldEnum]


  export const JogadorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    posicao: 'posicao',
    numero: 'numero',
    fotoUrl: 'fotoUrl',
    equipeId: 'equipeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JogadorScalarFieldEnum = (typeof JogadorScalarFieldEnum)[keyof typeof JogadorScalarFieldEnum]


  export const JogoScalarFieldEnum: {
    id: 'id',
    equipeCasaId: 'equipeCasaId',
    equipeForaId: 'equipeForaId',
    golsCasa: 'golsCasa',
    golsFora: 'golsFora',
    data: 'data',
    local: 'local',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JogoScalarFieldEnum = (typeof JogoScalarFieldEnum)[keyof typeof JogoScalarFieldEnum]


  export const GolScalarFieldEnum: {
    id: 'id',
    jogadorId: 'jogadorId',
    jogoId: 'jogoId',
    minuto: 'minuto',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GolScalarFieldEnum = (typeof GolScalarFieldEnum)[keyof typeof GolScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha',
    createdAt: 'createdAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const LogAdminScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    acao: 'acao',
    data: 'data',
    updatedAt: 'updatedAt'
  };

  export type LogAdminScalarFieldEnum = (typeof LogAdminScalarFieldEnum)[keyof typeof LogAdminScalarFieldEnum]


  export const InscricaoEquipeScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    contato: 'contato',
    capitao: 'capitao',
    aceiteRegulamento: 'aceiteRegulamento',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InscricaoEquipeScalarFieldEnum = (typeof InscricaoEquipeScalarFieldEnum)[keyof typeof InscricaoEquipeScalarFieldEnum]


  export const InscricaoJogadorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    posicao: 'posicao',
    numero: 'numero',
    inscricaoEquipeId: 'inscricaoEquipeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InscricaoJogadorScalarFieldEnum = (typeof InscricaoJogadorScalarFieldEnum)[keyof typeof InscricaoJogadorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'StatusJogo'
   */
  export type EnumStatusJogoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusJogo'>
    


  /**
   * Reference to a field of type 'StatusJogo[]'
   */
  export type ListEnumStatusJogoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusJogo[]'>
    


  /**
   * Reference to a field of type 'StatusInscricao'
   */
  export type EnumStatusInscricaoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusInscricao'>
    


  /**
   * Reference to a field of type 'StatusInscricao[]'
   */
  export type ListEnumStatusInscricaoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusInscricao[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EquipeWhereInput = {
    AND?: EquipeWhereInput | EquipeWhereInput[]
    OR?: EquipeWhereInput[]
    NOT?: EquipeWhereInput | EquipeWhereInput[]
    id?: StringFilter<"Equipe"> | string
    nome?: StringFilter<"Equipe"> | string
    slug?: StringFilter<"Equipe"> | string
    contato?: StringFilter<"Equipe"> | string
    capitao?: StringFilter<"Equipe"> | string
    aceiteRegulamento?: BoolFilter<"Equipe"> | boolean
    createdAt?: DateTimeFilter<"Equipe"> | Date | string
    updatedAt?: DateTimeFilter<"Equipe"> | Date | string
    jogadores?: JogadorListRelationFilter
    jogosCasa?: JogoListRelationFilter
    jogosFora?: JogoListRelationFilter
  }

  export type EquipeOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jogadores?: JogadorOrderByRelationAggregateInput
    jogosCasa?: JogoOrderByRelationAggregateInput
    jogosFora?: JogoOrderByRelationAggregateInput
  }

  export type EquipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: EquipeWhereInput | EquipeWhereInput[]
    OR?: EquipeWhereInput[]
    NOT?: EquipeWhereInput | EquipeWhereInput[]
    nome?: StringFilter<"Equipe"> | string
    contato?: StringFilter<"Equipe"> | string
    capitao?: StringFilter<"Equipe"> | string
    aceiteRegulamento?: BoolFilter<"Equipe"> | boolean
    createdAt?: DateTimeFilter<"Equipe"> | Date | string
    updatedAt?: DateTimeFilter<"Equipe"> | Date | string
    jogadores?: JogadorListRelationFilter
    jogosCasa?: JogoListRelationFilter
    jogosFora?: JogoListRelationFilter
  }, "id" | "slug">

  export type EquipeOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EquipeCountOrderByAggregateInput
    _max?: EquipeMaxOrderByAggregateInput
    _min?: EquipeMinOrderByAggregateInput
  }

  export type EquipeScalarWhereWithAggregatesInput = {
    AND?: EquipeScalarWhereWithAggregatesInput | EquipeScalarWhereWithAggregatesInput[]
    OR?: EquipeScalarWhereWithAggregatesInput[]
    NOT?: EquipeScalarWhereWithAggregatesInput | EquipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Equipe"> | string
    nome?: StringWithAggregatesFilter<"Equipe"> | string
    slug?: StringWithAggregatesFilter<"Equipe"> | string
    contato?: StringWithAggregatesFilter<"Equipe"> | string
    capitao?: StringWithAggregatesFilter<"Equipe"> | string
    aceiteRegulamento?: BoolWithAggregatesFilter<"Equipe"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Equipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Equipe"> | Date | string
  }

  export type JogadorWhereInput = {
    AND?: JogadorWhereInput | JogadorWhereInput[]
    OR?: JogadorWhereInput[]
    NOT?: JogadorWhereInput | JogadorWhereInput[]
    id?: StringFilter<"Jogador"> | string
    nome?: StringFilter<"Jogador"> | string
    posicao?: StringFilter<"Jogador"> | string
    numero?: IntFilter<"Jogador"> | number
    fotoUrl?: StringNullableFilter<"Jogador"> | string | null
    equipeId?: StringFilter<"Jogador"> | string
    createdAt?: DateTimeFilter<"Jogador"> | Date | string
    updatedAt?: DateTimeFilter<"Jogador"> | Date | string
    equipe?: XOR<EquipeScalarRelationFilter, EquipeWhereInput>
    gols?: GolListRelationFilter
  }

  export type JogadorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    fotoUrl?: SortOrderInput | SortOrder
    equipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    equipe?: EquipeOrderByWithRelationInput
    gols?: GolOrderByRelationAggregateInput
  }

  export type JogadorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    equipeId_numero?: JogadorEquipeIdNumeroCompoundUniqueInput
    AND?: JogadorWhereInput | JogadorWhereInput[]
    OR?: JogadorWhereInput[]
    NOT?: JogadorWhereInput | JogadorWhereInput[]
    nome?: StringFilter<"Jogador"> | string
    posicao?: StringFilter<"Jogador"> | string
    numero?: IntFilter<"Jogador"> | number
    fotoUrl?: StringNullableFilter<"Jogador"> | string | null
    equipeId?: StringFilter<"Jogador"> | string
    createdAt?: DateTimeFilter<"Jogador"> | Date | string
    updatedAt?: DateTimeFilter<"Jogador"> | Date | string
    equipe?: XOR<EquipeScalarRelationFilter, EquipeWhereInput>
    gols?: GolListRelationFilter
  }, "id" | "equipeId_numero">

  export type JogadorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    fotoUrl?: SortOrderInput | SortOrder
    equipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JogadorCountOrderByAggregateInput
    _avg?: JogadorAvgOrderByAggregateInput
    _max?: JogadorMaxOrderByAggregateInput
    _min?: JogadorMinOrderByAggregateInput
    _sum?: JogadorSumOrderByAggregateInput
  }

  export type JogadorScalarWhereWithAggregatesInput = {
    AND?: JogadorScalarWhereWithAggregatesInput | JogadorScalarWhereWithAggregatesInput[]
    OR?: JogadorScalarWhereWithAggregatesInput[]
    NOT?: JogadorScalarWhereWithAggregatesInput | JogadorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Jogador"> | string
    nome?: StringWithAggregatesFilter<"Jogador"> | string
    posicao?: StringWithAggregatesFilter<"Jogador"> | string
    numero?: IntWithAggregatesFilter<"Jogador"> | number
    fotoUrl?: StringNullableWithAggregatesFilter<"Jogador"> | string | null
    equipeId?: StringWithAggregatesFilter<"Jogador"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Jogador"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Jogador"> | Date | string
  }

  export type JogoWhereInput = {
    AND?: JogoWhereInput | JogoWhereInput[]
    OR?: JogoWhereInput[]
    NOT?: JogoWhereInput | JogoWhereInput[]
    id?: StringFilter<"Jogo"> | string
    equipeCasaId?: StringFilter<"Jogo"> | string
    equipeForaId?: StringFilter<"Jogo"> | string
    golsCasa?: IntFilter<"Jogo"> | number
    golsFora?: IntFilter<"Jogo"> | number
    data?: DateTimeFilter<"Jogo"> | Date | string
    local?: StringFilter<"Jogo"> | string
    status?: EnumStatusJogoFilter<"Jogo"> | $Enums.StatusJogo
    createdAt?: DateTimeFilter<"Jogo"> | Date | string
    updatedAt?: DateTimeFilter<"Jogo"> | Date | string
    equipeCasa?: XOR<EquipeScalarRelationFilter, EquipeWhereInput>
    equipeFora?: XOR<EquipeScalarRelationFilter, EquipeWhereInput>
    gols?: GolListRelationFilter
  }

  export type JogoOrderByWithRelationInput = {
    id?: SortOrder
    equipeCasaId?: SortOrder
    equipeForaId?: SortOrder
    golsCasa?: SortOrder
    golsFora?: SortOrder
    data?: SortOrder
    local?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    equipeCasa?: EquipeOrderByWithRelationInput
    equipeFora?: EquipeOrderByWithRelationInput
    gols?: GolOrderByRelationAggregateInput
  }

  export type JogoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JogoWhereInput | JogoWhereInput[]
    OR?: JogoWhereInput[]
    NOT?: JogoWhereInput | JogoWhereInput[]
    equipeCasaId?: StringFilter<"Jogo"> | string
    equipeForaId?: StringFilter<"Jogo"> | string
    golsCasa?: IntFilter<"Jogo"> | number
    golsFora?: IntFilter<"Jogo"> | number
    data?: DateTimeFilter<"Jogo"> | Date | string
    local?: StringFilter<"Jogo"> | string
    status?: EnumStatusJogoFilter<"Jogo"> | $Enums.StatusJogo
    createdAt?: DateTimeFilter<"Jogo"> | Date | string
    updatedAt?: DateTimeFilter<"Jogo"> | Date | string
    equipeCasa?: XOR<EquipeScalarRelationFilter, EquipeWhereInput>
    equipeFora?: XOR<EquipeScalarRelationFilter, EquipeWhereInput>
    gols?: GolListRelationFilter
  }, "id">

  export type JogoOrderByWithAggregationInput = {
    id?: SortOrder
    equipeCasaId?: SortOrder
    equipeForaId?: SortOrder
    golsCasa?: SortOrder
    golsFora?: SortOrder
    data?: SortOrder
    local?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JogoCountOrderByAggregateInput
    _avg?: JogoAvgOrderByAggregateInput
    _max?: JogoMaxOrderByAggregateInput
    _min?: JogoMinOrderByAggregateInput
    _sum?: JogoSumOrderByAggregateInput
  }

  export type JogoScalarWhereWithAggregatesInput = {
    AND?: JogoScalarWhereWithAggregatesInput | JogoScalarWhereWithAggregatesInput[]
    OR?: JogoScalarWhereWithAggregatesInput[]
    NOT?: JogoScalarWhereWithAggregatesInput | JogoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Jogo"> | string
    equipeCasaId?: StringWithAggregatesFilter<"Jogo"> | string
    equipeForaId?: StringWithAggregatesFilter<"Jogo"> | string
    golsCasa?: IntWithAggregatesFilter<"Jogo"> | number
    golsFora?: IntWithAggregatesFilter<"Jogo"> | number
    data?: DateTimeWithAggregatesFilter<"Jogo"> | Date | string
    local?: StringWithAggregatesFilter<"Jogo"> | string
    status?: EnumStatusJogoWithAggregatesFilter<"Jogo"> | $Enums.StatusJogo
    createdAt?: DateTimeWithAggregatesFilter<"Jogo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Jogo"> | Date | string
  }

  export type GolWhereInput = {
    AND?: GolWhereInput | GolWhereInput[]
    OR?: GolWhereInput[]
    NOT?: GolWhereInput | GolWhereInput[]
    id?: StringFilter<"Gol"> | string
    jogadorId?: StringFilter<"Gol"> | string
    jogoId?: StringFilter<"Gol"> | string
    minuto?: IntNullableFilter<"Gol"> | number | null
    createdAt?: DateTimeFilter<"Gol"> | Date | string
    updatedAt?: DateTimeFilter<"Gol"> | Date | string
    jogador?: XOR<JogadorScalarRelationFilter, JogadorWhereInput>
    jogo?: XOR<JogoScalarRelationFilter, JogoWhereInput>
  }

  export type GolOrderByWithRelationInput = {
    id?: SortOrder
    jogadorId?: SortOrder
    jogoId?: SortOrder
    minuto?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jogador?: JogadorOrderByWithRelationInput
    jogo?: JogoOrderByWithRelationInput
  }

  export type GolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GolWhereInput | GolWhereInput[]
    OR?: GolWhereInput[]
    NOT?: GolWhereInput | GolWhereInput[]
    jogadorId?: StringFilter<"Gol"> | string
    jogoId?: StringFilter<"Gol"> | string
    minuto?: IntNullableFilter<"Gol"> | number | null
    createdAt?: DateTimeFilter<"Gol"> | Date | string
    updatedAt?: DateTimeFilter<"Gol"> | Date | string
    jogador?: XOR<JogadorScalarRelationFilter, JogadorWhereInput>
    jogo?: XOR<JogoScalarRelationFilter, JogoWhereInput>
  }, "id">

  export type GolOrderByWithAggregationInput = {
    id?: SortOrder
    jogadorId?: SortOrder
    jogoId?: SortOrder
    minuto?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GolCountOrderByAggregateInput
    _avg?: GolAvgOrderByAggregateInput
    _max?: GolMaxOrderByAggregateInput
    _min?: GolMinOrderByAggregateInput
    _sum?: GolSumOrderByAggregateInput
  }

  export type GolScalarWhereWithAggregatesInput = {
    AND?: GolScalarWhereWithAggregatesInput | GolScalarWhereWithAggregatesInput[]
    OR?: GolScalarWhereWithAggregatesInput[]
    NOT?: GolScalarWhereWithAggregatesInput | GolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Gol"> | string
    jogadorId?: StringWithAggregatesFilter<"Gol"> | string
    jogoId?: StringWithAggregatesFilter<"Gol"> | string
    minuto?: IntNullableWithAggregatesFilter<"Gol"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Gol"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Gol"> | Date | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    senha?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    LogAdmin?: LogAdminListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    LogAdmin?: LogAdminOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    senha?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    LogAdmin?: LogAdminListRelationFilter
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    senha?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type LogAdminWhereInput = {
    AND?: LogAdminWhereInput | LogAdminWhereInput[]
    OR?: LogAdminWhereInput[]
    NOT?: LogAdminWhereInput | LogAdminWhereInput[]
    id?: StringFilter<"LogAdmin"> | string
    adminId?: StringFilter<"LogAdmin"> | string
    acao?: StringFilter<"LogAdmin"> | string
    data?: DateTimeFilter<"LogAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"LogAdmin"> | Date | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
  }

  export type LogAdminOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    acao?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
    admin?: AdminOrderByWithRelationInput
  }

  export type LogAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogAdminWhereInput | LogAdminWhereInput[]
    OR?: LogAdminWhereInput[]
    NOT?: LogAdminWhereInput | LogAdminWhereInput[]
    adminId?: StringFilter<"LogAdmin"> | string
    acao?: StringFilter<"LogAdmin"> | string
    data?: DateTimeFilter<"LogAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"LogAdmin"> | Date | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
  }, "id">

  export type LogAdminOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    acao?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
    _count?: LogAdminCountOrderByAggregateInput
    _max?: LogAdminMaxOrderByAggregateInput
    _min?: LogAdminMinOrderByAggregateInput
  }

  export type LogAdminScalarWhereWithAggregatesInput = {
    AND?: LogAdminScalarWhereWithAggregatesInput | LogAdminScalarWhereWithAggregatesInput[]
    OR?: LogAdminScalarWhereWithAggregatesInput[]
    NOT?: LogAdminScalarWhereWithAggregatesInput | LogAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LogAdmin"> | string
    adminId?: StringWithAggregatesFilter<"LogAdmin"> | string
    acao?: StringWithAggregatesFilter<"LogAdmin"> | string
    data?: DateTimeWithAggregatesFilter<"LogAdmin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LogAdmin"> | Date | string
  }

  export type InscricaoEquipeWhereInput = {
    AND?: InscricaoEquipeWhereInput | InscricaoEquipeWhereInput[]
    OR?: InscricaoEquipeWhereInput[]
    NOT?: InscricaoEquipeWhereInput | InscricaoEquipeWhereInput[]
    id?: StringFilter<"InscricaoEquipe"> | string
    nome?: StringFilter<"InscricaoEquipe"> | string
    contato?: StringFilter<"InscricaoEquipe"> | string
    capitao?: StringFilter<"InscricaoEquipe"> | string
    aceiteRegulamento?: BoolFilter<"InscricaoEquipe"> | boolean
    status?: EnumStatusInscricaoFilter<"InscricaoEquipe"> | $Enums.StatusInscricao
    createdAt?: DateTimeFilter<"InscricaoEquipe"> | Date | string
    updatedAt?: DateTimeFilter<"InscricaoEquipe"> | Date | string
    jogadores?: InscricaoJogadorListRelationFilter
  }

  export type InscricaoEquipeOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jogadores?: InscricaoJogadorOrderByRelationAggregateInput
  }

  export type InscricaoEquipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InscricaoEquipeWhereInput | InscricaoEquipeWhereInput[]
    OR?: InscricaoEquipeWhereInput[]
    NOT?: InscricaoEquipeWhereInput | InscricaoEquipeWhereInput[]
    nome?: StringFilter<"InscricaoEquipe"> | string
    contato?: StringFilter<"InscricaoEquipe"> | string
    capitao?: StringFilter<"InscricaoEquipe"> | string
    aceiteRegulamento?: BoolFilter<"InscricaoEquipe"> | boolean
    status?: EnumStatusInscricaoFilter<"InscricaoEquipe"> | $Enums.StatusInscricao
    createdAt?: DateTimeFilter<"InscricaoEquipe"> | Date | string
    updatedAt?: DateTimeFilter<"InscricaoEquipe"> | Date | string
    jogadores?: InscricaoJogadorListRelationFilter
  }, "id">

  export type InscricaoEquipeOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InscricaoEquipeCountOrderByAggregateInput
    _max?: InscricaoEquipeMaxOrderByAggregateInput
    _min?: InscricaoEquipeMinOrderByAggregateInput
  }

  export type InscricaoEquipeScalarWhereWithAggregatesInput = {
    AND?: InscricaoEquipeScalarWhereWithAggregatesInput | InscricaoEquipeScalarWhereWithAggregatesInput[]
    OR?: InscricaoEquipeScalarWhereWithAggregatesInput[]
    NOT?: InscricaoEquipeScalarWhereWithAggregatesInput | InscricaoEquipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InscricaoEquipe"> | string
    nome?: StringWithAggregatesFilter<"InscricaoEquipe"> | string
    contato?: StringWithAggregatesFilter<"InscricaoEquipe"> | string
    capitao?: StringWithAggregatesFilter<"InscricaoEquipe"> | string
    aceiteRegulamento?: BoolWithAggregatesFilter<"InscricaoEquipe"> | boolean
    status?: EnumStatusInscricaoWithAggregatesFilter<"InscricaoEquipe"> | $Enums.StatusInscricao
    createdAt?: DateTimeWithAggregatesFilter<"InscricaoEquipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InscricaoEquipe"> | Date | string
  }

  export type InscricaoJogadorWhereInput = {
    AND?: InscricaoJogadorWhereInput | InscricaoJogadorWhereInput[]
    OR?: InscricaoJogadorWhereInput[]
    NOT?: InscricaoJogadorWhereInput | InscricaoJogadorWhereInput[]
    id?: StringFilter<"InscricaoJogador"> | string
    nome?: StringFilter<"InscricaoJogador"> | string
    posicao?: StringFilter<"InscricaoJogador"> | string
    numero?: IntFilter<"InscricaoJogador"> | number
    inscricaoEquipeId?: StringFilter<"InscricaoJogador"> | string
    createdAt?: DateTimeFilter<"InscricaoJogador"> | Date | string
    updatedAt?: DateTimeFilter<"InscricaoJogador"> | Date | string
    inscricaoEquipe?: XOR<InscricaoEquipeScalarRelationFilter, InscricaoEquipeWhereInput>
  }

  export type InscricaoJogadorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    inscricaoEquipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    inscricaoEquipe?: InscricaoEquipeOrderByWithRelationInput
  }

  export type InscricaoJogadorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InscricaoJogadorWhereInput | InscricaoJogadorWhereInput[]
    OR?: InscricaoJogadorWhereInput[]
    NOT?: InscricaoJogadorWhereInput | InscricaoJogadorWhereInput[]
    nome?: StringFilter<"InscricaoJogador"> | string
    posicao?: StringFilter<"InscricaoJogador"> | string
    numero?: IntFilter<"InscricaoJogador"> | number
    inscricaoEquipeId?: StringFilter<"InscricaoJogador"> | string
    createdAt?: DateTimeFilter<"InscricaoJogador"> | Date | string
    updatedAt?: DateTimeFilter<"InscricaoJogador"> | Date | string
    inscricaoEquipe?: XOR<InscricaoEquipeScalarRelationFilter, InscricaoEquipeWhereInput>
  }, "id">

  export type InscricaoJogadorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    inscricaoEquipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InscricaoJogadorCountOrderByAggregateInput
    _avg?: InscricaoJogadorAvgOrderByAggregateInput
    _max?: InscricaoJogadorMaxOrderByAggregateInput
    _min?: InscricaoJogadorMinOrderByAggregateInput
    _sum?: InscricaoJogadorSumOrderByAggregateInput
  }

  export type InscricaoJogadorScalarWhereWithAggregatesInput = {
    AND?: InscricaoJogadorScalarWhereWithAggregatesInput | InscricaoJogadorScalarWhereWithAggregatesInput[]
    OR?: InscricaoJogadorScalarWhereWithAggregatesInput[]
    NOT?: InscricaoJogadorScalarWhereWithAggregatesInput | InscricaoJogadorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InscricaoJogador"> | string
    nome?: StringWithAggregatesFilter<"InscricaoJogador"> | string
    posicao?: StringWithAggregatesFilter<"InscricaoJogador"> | string
    numero?: IntWithAggregatesFilter<"InscricaoJogador"> | number
    inscricaoEquipeId?: StringWithAggregatesFilter<"InscricaoJogador"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InscricaoJogador"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InscricaoJogador"> | Date | string
  }

  export type EquipeCreateInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: JogadorCreateNestedManyWithoutEquipeInput
    jogosCasa?: JogoCreateNestedManyWithoutEquipeCasaInput
    jogosFora?: JogoCreateNestedManyWithoutEquipeForaInput
  }

  export type EquipeUncheckedCreateInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: JogadorUncheckedCreateNestedManyWithoutEquipeInput
    jogosCasa?: JogoUncheckedCreateNestedManyWithoutEquipeCasaInput
    jogosFora?: JogoUncheckedCreateNestedManyWithoutEquipeForaInput
  }

  export type EquipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: JogadorUpdateManyWithoutEquipeNestedInput
    jogosCasa?: JogoUpdateManyWithoutEquipeCasaNestedInput
    jogosFora?: JogoUpdateManyWithoutEquipeForaNestedInput
  }

  export type EquipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: JogadorUncheckedUpdateManyWithoutEquipeNestedInput
    jogosCasa?: JogoUncheckedUpdateManyWithoutEquipeCasaNestedInput
    jogosFora?: JogoUncheckedUpdateManyWithoutEquipeForaNestedInput
  }

  export type EquipeCreateManyInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogadorCreateInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    equipe: EquipeCreateNestedOneWithoutJogadoresInput
    gols?: GolCreateNestedManyWithoutJogadorInput
  }

  export type JogadorUncheckedCreateInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    equipeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gols?: GolUncheckedCreateNestedManyWithoutJogadorInput
  }

  export type JogadorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipe?: EquipeUpdateOneRequiredWithoutJogadoresNestedInput
    gols?: GolUpdateManyWithoutJogadorNestedInput
  }

  export type JogadorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    equipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gols?: GolUncheckedUpdateManyWithoutJogadorNestedInput
  }

  export type JogadorCreateManyInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    equipeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogadorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogadorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    equipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoCreateInput = {
    id?: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    equipeCasa: EquipeCreateNestedOneWithoutJogosCasaInput
    equipeFora: EquipeCreateNestedOneWithoutJogosForaInput
    gols?: GolCreateNestedManyWithoutJogoInput
  }

  export type JogoUncheckedCreateInput = {
    id?: string
    equipeCasaId: string
    equipeForaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    gols?: GolUncheckedCreateNestedManyWithoutJogoInput
  }

  export type JogoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipeCasa?: EquipeUpdateOneRequiredWithoutJogosCasaNestedInput
    equipeFora?: EquipeUpdateOneRequiredWithoutJogosForaNestedInput
    gols?: GolUpdateManyWithoutJogoNestedInput
  }

  export type JogoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeCasaId?: StringFieldUpdateOperationsInput | string
    equipeForaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gols?: GolUncheckedUpdateManyWithoutJogoNestedInput
  }

  export type JogoCreateManyInput = {
    id?: string
    equipeCasaId: string
    equipeForaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeCasaId?: StringFieldUpdateOperationsInput | string
    equipeForaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolCreateInput = {
    id?: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jogador: JogadorCreateNestedOneWithoutGolsInput
    jogo: JogoCreateNestedOneWithoutGolsInput
  }

  export type GolUncheckedCreateInput = {
    id?: string
    jogadorId: string
    jogoId: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogador?: JogadorUpdateOneRequiredWithoutGolsNestedInput
    jogo?: JogoUpdateOneRequiredWithoutGolsNestedInput
  }

  export type GolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogadorId?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolCreateManyInput = {
    id?: string
    jogadorId: string
    jogoId: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogadorId?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateInput = {
    id?: string
    email: string
    senha: string
    createdAt?: Date | string
    LogAdmin?: LogAdminCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    email: string
    senha: string
    createdAt?: Date | string
    LogAdmin?: LogAdminUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LogAdmin?: LogAdminUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LogAdmin?: LogAdminUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    id?: string
    email: string
    senha: string
    createdAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminCreateInput = {
    id?: string
    acao: string
    data?: Date | string
    updatedAt?: Date | string
    admin: AdminCreateNestedOneWithoutLogAdminInput
  }

  export type LogAdminUncheckedCreateInput = {
    id?: string
    adminId: string
    acao: string
    data?: Date | string
    updatedAt?: Date | string
  }

  export type LogAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutLogAdminNestedInput
  }

  export type LogAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminCreateManyInput = {
    id?: string
    adminId: string
    acao: string
    data?: Date | string
    updatedAt?: Date | string
  }

  export type LogAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoEquipeCreateInput = {
    id?: string
    nome: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    status?: $Enums.StatusInscricao
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: InscricaoJogadorCreateNestedManyWithoutInscricaoEquipeInput
  }

  export type InscricaoEquipeUncheckedCreateInput = {
    id?: string
    nome: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    status?: $Enums.StatusInscricao
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: InscricaoJogadorUncheckedCreateNestedManyWithoutInscricaoEquipeInput
  }

  export type InscricaoEquipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusInscricaoFieldUpdateOperationsInput | $Enums.StatusInscricao
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: InscricaoJogadorUpdateManyWithoutInscricaoEquipeNestedInput
  }

  export type InscricaoEquipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusInscricaoFieldUpdateOperationsInput | $Enums.StatusInscricao
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: InscricaoJogadorUncheckedUpdateManyWithoutInscricaoEquipeNestedInput
  }

  export type InscricaoEquipeCreateManyInput = {
    id?: string
    nome: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    status?: $Enums.StatusInscricao
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoEquipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusInscricaoFieldUpdateOperationsInput | $Enums.StatusInscricao
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoEquipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusInscricaoFieldUpdateOperationsInput | $Enums.StatusInscricao
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorCreateInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    createdAt?: Date | string
    updatedAt?: Date | string
    inscricaoEquipe: InscricaoEquipeCreateNestedOneWithoutJogadoresInput
  }

  export type InscricaoJogadorUncheckedCreateInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    inscricaoEquipeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoJogadorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscricaoEquipe?: InscricaoEquipeUpdateOneRequiredWithoutJogadoresNestedInput
  }

  export type InscricaoJogadorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    inscricaoEquipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorCreateManyInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    inscricaoEquipeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoJogadorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    inscricaoEquipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type JogadorListRelationFilter = {
    every?: JogadorWhereInput
    some?: JogadorWhereInput
    none?: JogadorWhereInput
  }

  export type JogoListRelationFilter = {
    every?: JogoWhereInput
    some?: JogoWhereInput
    none?: JogoWhereInput
  }

  export type JogadorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JogoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipeCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipeMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipeMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EquipeScalarRelationFilter = {
    is?: EquipeWhereInput
    isNot?: EquipeWhereInput
  }

  export type GolListRelationFilter = {
    every?: GolWhereInput
    some?: GolWhereInput
    none?: GolWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JogadorEquipeIdNumeroCompoundUniqueInput = {
    equipeId: string
    numero: number
  }

  export type JogadorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    fotoUrl?: SortOrder
    equipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogadorAvgOrderByAggregateInput = {
    numero?: SortOrder
  }

  export type JogadorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    fotoUrl?: SortOrder
    equipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogadorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    fotoUrl?: SortOrder
    equipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogadorSumOrderByAggregateInput = {
    numero?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStatusJogoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusJogo | EnumStatusJogoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusJogoFilter<$PrismaModel> | $Enums.StatusJogo
  }

  export type JogoCountOrderByAggregateInput = {
    id?: SortOrder
    equipeCasaId?: SortOrder
    equipeForaId?: SortOrder
    golsCasa?: SortOrder
    golsFora?: SortOrder
    data?: SortOrder
    local?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogoAvgOrderByAggregateInput = {
    golsCasa?: SortOrder
    golsFora?: SortOrder
  }

  export type JogoMaxOrderByAggregateInput = {
    id?: SortOrder
    equipeCasaId?: SortOrder
    equipeForaId?: SortOrder
    golsCasa?: SortOrder
    golsFora?: SortOrder
    data?: SortOrder
    local?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogoMinOrderByAggregateInput = {
    id?: SortOrder
    equipeCasaId?: SortOrder
    equipeForaId?: SortOrder
    golsCasa?: SortOrder
    golsFora?: SortOrder
    data?: SortOrder
    local?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogoSumOrderByAggregateInput = {
    golsCasa?: SortOrder
    golsFora?: SortOrder
  }

  export type EnumStatusJogoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusJogo | EnumStatusJogoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusJogoWithAggregatesFilter<$PrismaModel> | $Enums.StatusJogo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusJogoFilter<$PrismaModel>
    _max?: NestedEnumStatusJogoFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type JogadorScalarRelationFilter = {
    is?: JogadorWhereInput
    isNot?: JogadorWhereInput
  }

  export type JogoScalarRelationFilter = {
    is?: JogoWhereInput
    isNot?: JogoWhereInput
  }

  export type GolCountOrderByAggregateInput = {
    id?: SortOrder
    jogadorId?: SortOrder
    jogoId?: SortOrder
    minuto?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GolAvgOrderByAggregateInput = {
    minuto?: SortOrder
  }

  export type GolMaxOrderByAggregateInput = {
    id?: SortOrder
    jogadorId?: SortOrder
    jogoId?: SortOrder
    minuto?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GolMinOrderByAggregateInput = {
    id?: SortOrder
    jogadorId?: SortOrder
    jogoId?: SortOrder
    minuto?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GolSumOrderByAggregateInput = {
    minuto?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LogAdminListRelationFilter = {
    every?: LogAdminWhereInput
    some?: LogAdminWhereInput
    none?: LogAdminWhereInput
  }

  export type LogAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminScalarRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type LogAdminCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    acao?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    acao?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogAdminMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    acao?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStatusInscricaoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusInscricao | EnumStatusInscricaoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusInscricaoFilter<$PrismaModel> | $Enums.StatusInscricao
  }

  export type InscricaoJogadorListRelationFilter = {
    every?: InscricaoJogadorWhereInput
    some?: InscricaoJogadorWhereInput
    none?: InscricaoJogadorWhereInput
  }

  export type InscricaoJogadorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InscricaoEquipeCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InscricaoEquipeMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InscricaoEquipeMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    contato?: SortOrder
    capitao?: SortOrder
    aceiteRegulamento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStatusInscricaoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusInscricao | EnumStatusInscricaoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusInscricaoWithAggregatesFilter<$PrismaModel> | $Enums.StatusInscricao
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusInscricaoFilter<$PrismaModel>
    _max?: NestedEnumStatusInscricaoFilter<$PrismaModel>
  }

  export type InscricaoEquipeScalarRelationFilter = {
    is?: InscricaoEquipeWhereInput
    isNot?: InscricaoEquipeWhereInput
  }

  export type InscricaoJogadorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    inscricaoEquipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InscricaoJogadorAvgOrderByAggregateInput = {
    numero?: SortOrder
  }

  export type InscricaoJogadorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    inscricaoEquipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InscricaoJogadorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    posicao?: SortOrder
    numero?: SortOrder
    inscricaoEquipeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InscricaoJogadorSumOrderByAggregateInput = {
    numero?: SortOrder
  }

  export type JogadorCreateNestedManyWithoutEquipeInput = {
    create?: XOR<JogadorCreateWithoutEquipeInput, JogadorUncheckedCreateWithoutEquipeInput> | JogadorCreateWithoutEquipeInput[] | JogadorUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JogadorCreateOrConnectWithoutEquipeInput | JogadorCreateOrConnectWithoutEquipeInput[]
    createMany?: JogadorCreateManyEquipeInputEnvelope
    connect?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
  }

  export type JogoCreateNestedManyWithoutEquipeCasaInput = {
    create?: XOR<JogoCreateWithoutEquipeCasaInput, JogoUncheckedCreateWithoutEquipeCasaInput> | JogoCreateWithoutEquipeCasaInput[] | JogoUncheckedCreateWithoutEquipeCasaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeCasaInput | JogoCreateOrConnectWithoutEquipeCasaInput[]
    createMany?: JogoCreateManyEquipeCasaInputEnvelope
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
  }

  export type JogoCreateNestedManyWithoutEquipeForaInput = {
    create?: XOR<JogoCreateWithoutEquipeForaInput, JogoUncheckedCreateWithoutEquipeForaInput> | JogoCreateWithoutEquipeForaInput[] | JogoUncheckedCreateWithoutEquipeForaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeForaInput | JogoCreateOrConnectWithoutEquipeForaInput[]
    createMany?: JogoCreateManyEquipeForaInputEnvelope
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
  }

  export type JogadorUncheckedCreateNestedManyWithoutEquipeInput = {
    create?: XOR<JogadorCreateWithoutEquipeInput, JogadorUncheckedCreateWithoutEquipeInput> | JogadorCreateWithoutEquipeInput[] | JogadorUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JogadorCreateOrConnectWithoutEquipeInput | JogadorCreateOrConnectWithoutEquipeInput[]
    createMany?: JogadorCreateManyEquipeInputEnvelope
    connect?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
  }

  export type JogoUncheckedCreateNestedManyWithoutEquipeCasaInput = {
    create?: XOR<JogoCreateWithoutEquipeCasaInput, JogoUncheckedCreateWithoutEquipeCasaInput> | JogoCreateWithoutEquipeCasaInput[] | JogoUncheckedCreateWithoutEquipeCasaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeCasaInput | JogoCreateOrConnectWithoutEquipeCasaInput[]
    createMany?: JogoCreateManyEquipeCasaInputEnvelope
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
  }

  export type JogoUncheckedCreateNestedManyWithoutEquipeForaInput = {
    create?: XOR<JogoCreateWithoutEquipeForaInput, JogoUncheckedCreateWithoutEquipeForaInput> | JogoCreateWithoutEquipeForaInput[] | JogoUncheckedCreateWithoutEquipeForaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeForaInput | JogoCreateOrConnectWithoutEquipeForaInput[]
    createMany?: JogoCreateManyEquipeForaInputEnvelope
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type JogadorUpdateManyWithoutEquipeNestedInput = {
    create?: XOR<JogadorCreateWithoutEquipeInput, JogadorUncheckedCreateWithoutEquipeInput> | JogadorCreateWithoutEquipeInput[] | JogadorUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JogadorCreateOrConnectWithoutEquipeInput | JogadorCreateOrConnectWithoutEquipeInput[]
    upsert?: JogadorUpsertWithWhereUniqueWithoutEquipeInput | JogadorUpsertWithWhereUniqueWithoutEquipeInput[]
    createMany?: JogadorCreateManyEquipeInputEnvelope
    set?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    disconnect?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    delete?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    connect?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    update?: JogadorUpdateWithWhereUniqueWithoutEquipeInput | JogadorUpdateWithWhereUniqueWithoutEquipeInput[]
    updateMany?: JogadorUpdateManyWithWhereWithoutEquipeInput | JogadorUpdateManyWithWhereWithoutEquipeInput[]
    deleteMany?: JogadorScalarWhereInput | JogadorScalarWhereInput[]
  }

  export type JogoUpdateManyWithoutEquipeCasaNestedInput = {
    create?: XOR<JogoCreateWithoutEquipeCasaInput, JogoUncheckedCreateWithoutEquipeCasaInput> | JogoCreateWithoutEquipeCasaInput[] | JogoUncheckedCreateWithoutEquipeCasaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeCasaInput | JogoCreateOrConnectWithoutEquipeCasaInput[]
    upsert?: JogoUpsertWithWhereUniqueWithoutEquipeCasaInput | JogoUpsertWithWhereUniqueWithoutEquipeCasaInput[]
    createMany?: JogoCreateManyEquipeCasaInputEnvelope
    set?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    disconnect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    delete?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    update?: JogoUpdateWithWhereUniqueWithoutEquipeCasaInput | JogoUpdateWithWhereUniqueWithoutEquipeCasaInput[]
    updateMany?: JogoUpdateManyWithWhereWithoutEquipeCasaInput | JogoUpdateManyWithWhereWithoutEquipeCasaInput[]
    deleteMany?: JogoScalarWhereInput | JogoScalarWhereInput[]
  }

  export type JogoUpdateManyWithoutEquipeForaNestedInput = {
    create?: XOR<JogoCreateWithoutEquipeForaInput, JogoUncheckedCreateWithoutEquipeForaInput> | JogoCreateWithoutEquipeForaInput[] | JogoUncheckedCreateWithoutEquipeForaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeForaInput | JogoCreateOrConnectWithoutEquipeForaInput[]
    upsert?: JogoUpsertWithWhereUniqueWithoutEquipeForaInput | JogoUpsertWithWhereUniqueWithoutEquipeForaInput[]
    createMany?: JogoCreateManyEquipeForaInputEnvelope
    set?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    disconnect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    delete?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    update?: JogoUpdateWithWhereUniqueWithoutEquipeForaInput | JogoUpdateWithWhereUniqueWithoutEquipeForaInput[]
    updateMany?: JogoUpdateManyWithWhereWithoutEquipeForaInput | JogoUpdateManyWithWhereWithoutEquipeForaInput[]
    deleteMany?: JogoScalarWhereInput | JogoScalarWhereInput[]
  }

  export type JogadorUncheckedUpdateManyWithoutEquipeNestedInput = {
    create?: XOR<JogadorCreateWithoutEquipeInput, JogadorUncheckedCreateWithoutEquipeInput> | JogadorCreateWithoutEquipeInput[] | JogadorUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JogadorCreateOrConnectWithoutEquipeInput | JogadorCreateOrConnectWithoutEquipeInput[]
    upsert?: JogadorUpsertWithWhereUniqueWithoutEquipeInput | JogadorUpsertWithWhereUniqueWithoutEquipeInput[]
    createMany?: JogadorCreateManyEquipeInputEnvelope
    set?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    disconnect?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    delete?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    connect?: JogadorWhereUniqueInput | JogadorWhereUniqueInput[]
    update?: JogadorUpdateWithWhereUniqueWithoutEquipeInput | JogadorUpdateWithWhereUniqueWithoutEquipeInput[]
    updateMany?: JogadorUpdateManyWithWhereWithoutEquipeInput | JogadorUpdateManyWithWhereWithoutEquipeInput[]
    deleteMany?: JogadorScalarWhereInput | JogadorScalarWhereInput[]
  }

  export type JogoUncheckedUpdateManyWithoutEquipeCasaNestedInput = {
    create?: XOR<JogoCreateWithoutEquipeCasaInput, JogoUncheckedCreateWithoutEquipeCasaInput> | JogoCreateWithoutEquipeCasaInput[] | JogoUncheckedCreateWithoutEquipeCasaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeCasaInput | JogoCreateOrConnectWithoutEquipeCasaInput[]
    upsert?: JogoUpsertWithWhereUniqueWithoutEquipeCasaInput | JogoUpsertWithWhereUniqueWithoutEquipeCasaInput[]
    createMany?: JogoCreateManyEquipeCasaInputEnvelope
    set?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    disconnect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    delete?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    update?: JogoUpdateWithWhereUniqueWithoutEquipeCasaInput | JogoUpdateWithWhereUniqueWithoutEquipeCasaInput[]
    updateMany?: JogoUpdateManyWithWhereWithoutEquipeCasaInput | JogoUpdateManyWithWhereWithoutEquipeCasaInput[]
    deleteMany?: JogoScalarWhereInput | JogoScalarWhereInput[]
  }

  export type JogoUncheckedUpdateManyWithoutEquipeForaNestedInput = {
    create?: XOR<JogoCreateWithoutEquipeForaInput, JogoUncheckedCreateWithoutEquipeForaInput> | JogoCreateWithoutEquipeForaInput[] | JogoUncheckedCreateWithoutEquipeForaInput[]
    connectOrCreate?: JogoCreateOrConnectWithoutEquipeForaInput | JogoCreateOrConnectWithoutEquipeForaInput[]
    upsert?: JogoUpsertWithWhereUniqueWithoutEquipeForaInput | JogoUpsertWithWhereUniqueWithoutEquipeForaInput[]
    createMany?: JogoCreateManyEquipeForaInputEnvelope
    set?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    disconnect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    delete?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    connect?: JogoWhereUniqueInput | JogoWhereUniqueInput[]
    update?: JogoUpdateWithWhereUniqueWithoutEquipeForaInput | JogoUpdateWithWhereUniqueWithoutEquipeForaInput[]
    updateMany?: JogoUpdateManyWithWhereWithoutEquipeForaInput | JogoUpdateManyWithWhereWithoutEquipeForaInput[]
    deleteMany?: JogoScalarWhereInput | JogoScalarWhereInput[]
  }

  export type EquipeCreateNestedOneWithoutJogadoresInput = {
    create?: XOR<EquipeCreateWithoutJogadoresInput, EquipeUncheckedCreateWithoutJogadoresInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJogadoresInput
    connect?: EquipeWhereUniqueInput
  }

  export type GolCreateNestedManyWithoutJogadorInput = {
    create?: XOR<GolCreateWithoutJogadorInput, GolUncheckedCreateWithoutJogadorInput> | GolCreateWithoutJogadorInput[] | GolUncheckedCreateWithoutJogadorInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogadorInput | GolCreateOrConnectWithoutJogadorInput[]
    createMany?: GolCreateManyJogadorInputEnvelope
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
  }

  export type GolUncheckedCreateNestedManyWithoutJogadorInput = {
    create?: XOR<GolCreateWithoutJogadorInput, GolUncheckedCreateWithoutJogadorInput> | GolCreateWithoutJogadorInput[] | GolUncheckedCreateWithoutJogadorInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogadorInput | GolCreateOrConnectWithoutJogadorInput[]
    createMany?: GolCreateManyJogadorInputEnvelope
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EquipeUpdateOneRequiredWithoutJogadoresNestedInput = {
    create?: XOR<EquipeCreateWithoutJogadoresInput, EquipeUncheckedCreateWithoutJogadoresInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJogadoresInput
    upsert?: EquipeUpsertWithoutJogadoresInput
    connect?: EquipeWhereUniqueInput
    update?: XOR<XOR<EquipeUpdateToOneWithWhereWithoutJogadoresInput, EquipeUpdateWithoutJogadoresInput>, EquipeUncheckedUpdateWithoutJogadoresInput>
  }

  export type GolUpdateManyWithoutJogadorNestedInput = {
    create?: XOR<GolCreateWithoutJogadorInput, GolUncheckedCreateWithoutJogadorInput> | GolCreateWithoutJogadorInput[] | GolUncheckedCreateWithoutJogadorInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogadorInput | GolCreateOrConnectWithoutJogadorInput[]
    upsert?: GolUpsertWithWhereUniqueWithoutJogadorInput | GolUpsertWithWhereUniqueWithoutJogadorInput[]
    createMany?: GolCreateManyJogadorInputEnvelope
    set?: GolWhereUniqueInput | GolWhereUniqueInput[]
    disconnect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    delete?: GolWhereUniqueInput | GolWhereUniqueInput[]
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    update?: GolUpdateWithWhereUniqueWithoutJogadorInput | GolUpdateWithWhereUniqueWithoutJogadorInput[]
    updateMany?: GolUpdateManyWithWhereWithoutJogadorInput | GolUpdateManyWithWhereWithoutJogadorInput[]
    deleteMany?: GolScalarWhereInput | GolScalarWhereInput[]
  }

  export type GolUncheckedUpdateManyWithoutJogadorNestedInput = {
    create?: XOR<GolCreateWithoutJogadorInput, GolUncheckedCreateWithoutJogadorInput> | GolCreateWithoutJogadorInput[] | GolUncheckedCreateWithoutJogadorInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogadorInput | GolCreateOrConnectWithoutJogadorInput[]
    upsert?: GolUpsertWithWhereUniqueWithoutJogadorInput | GolUpsertWithWhereUniqueWithoutJogadorInput[]
    createMany?: GolCreateManyJogadorInputEnvelope
    set?: GolWhereUniqueInput | GolWhereUniqueInput[]
    disconnect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    delete?: GolWhereUniqueInput | GolWhereUniqueInput[]
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    update?: GolUpdateWithWhereUniqueWithoutJogadorInput | GolUpdateWithWhereUniqueWithoutJogadorInput[]
    updateMany?: GolUpdateManyWithWhereWithoutJogadorInput | GolUpdateManyWithWhereWithoutJogadorInput[]
    deleteMany?: GolScalarWhereInput | GolScalarWhereInput[]
  }

  export type EquipeCreateNestedOneWithoutJogosCasaInput = {
    create?: XOR<EquipeCreateWithoutJogosCasaInput, EquipeUncheckedCreateWithoutJogosCasaInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJogosCasaInput
    connect?: EquipeWhereUniqueInput
  }

  export type EquipeCreateNestedOneWithoutJogosForaInput = {
    create?: XOR<EquipeCreateWithoutJogosForaInput, EquipeUncheckedCreateWithoutJogosForaInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJogosForaInput
    connect?: EquipeWhereUniqueInput
  }

  export type GolCreateNestedManyWithoutJogoInput = {
    create?: XOR<GolCreateWithoutJogoInput, GolUncheckedCreateWithoutJogoInput> | GolCreateWithoutJogoInput[] | GolUncheckedCreateWithoutJogoInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogoInput | GolCreateOrConnectWithoutJogoInput[]
    createMany?: GolCreateManyJogoInputEnvelope
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
  }

  export type GolUncheckedCreateNestedManyWithoutJogoInput = {
    create?: XOR<GolCreateWithoutJogoInput, GolUncheckedCreateWithoutJogoInput> | GolCreateWithoutJogoInput[] | GolUncheckedCreateWithoutJogoInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogoInput | GolCreateOrConnectWithoutJogoInput[]
    createMany?: GolCreateManyJogoInputEnvelope
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
  }

  export type EnumStatusJogoFieldUpdateOperationsInput = {
    set?: $Enums.StatusJogo
  }

  export type EquipeUpdateOneRequiredWithoutJogosCasaNestedInput = {
    create?: XOR<EquipeCreateWithoutJogosCasaInput, EquipeUncheckedCreateWithoutJogosCasaInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJogosCasaInput
    upsert?: EquipeUpsertWithoutJogosCasaInput
    connect?: EquipeWhereUniqueInput
    update?: XOR<XOR<EquipeUpdateToOneWithWhereWithoutJogosCasaInput, EquipeUpdateWithoutJogosCasaInput>, EquipeUncheckedUpdateWithoutJogosCasaInput>
  }

  export type EquipeUpdateOneRequiredWithoutJogosForaNestedInput = {
    create?: XOR<EquipeCreateWithoutJogosForaInput, EquipeUncheckedCreateWithoutJogosForaInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJogosForaInput
    upsert?: EquipeUpsertWithoutJogosForaInput
    connect?: EquipeWhereUniqueInput
    update?: XOR<XOR<EquipeUpdateToOneWithWhereWithoutJogosForaInput, EquipeUpdateWithoutJogosForaInput>, EquipeUncheckedUpdateWithoutJogosForaInput>
  }

  export type GolUpdateManyWithoutJogoNestedInput = {
    create?: XOR<GolCreateWithoutJogoInput, GolUncheckedCreateWithoutJogoInput> | GolCreateWithoutJogoInput[] | GolUncheckedCreateWithoutJogoInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogoInput | GolCreateOrConnectWithoutJogoInput[]
    upsert?: GolUpsertWithWhereUniqueWithoutJogoInput | GolUpsertWithWhereUniqueWithoutJogoInput[]
    createMany?: GolCreateManyJogoInputEnvelope
    set?: GolWhereUniqueInput | GolWhereUniqueInput[]
    disconnect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    delete?: GolWhereUniqueInput | GolWhereUniqueInput[]
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    update?: GolUpdateWithWhereUniqueWithoutJogoInput | GolUpdateWithWhereUniqueWithoutJogoInput[]
    updateMany?: GolUpdateManyWithWhereWithoutJogoInput | GolUpdateManyWithWhereWithoutJogoInput[]
    deleteMany?: GolScalarWhereInput | GolScalarWhereInput[]
  }

  export type GolUncheckedUpdateManyWithoutJogoNestedInput = {
    create?: XOR<GolCreateWithoutJogoInput, GolUncheckedCreateWithoutJogoInput> | GolCreateWithoutJogoInput[] | GolUncheckedCreateWithoutJogoInput[]
    connectOrCreate?: GolCreateOrConnectWithoutJogoInput | GolCreateOrConnectWithoutJogoInput[]
    upsert?: GolUpsertWithWhereUniqueWithoutJogoInput | GolUpsertWithWhereUniqueWithoutJogoInput[]
    createMany?: GolCreateManyJogoInputEnvelope
    set?: GolWhereUniqueInput | GolWhereUniqueInput[]
    disconnect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    delete?: GolWhereUniqueInput | GolWhereUniqueInput[]
    connect?: GolWhereUniqueInput | GolWhereUniqueInput[]
    update?: GolUpdateWithWhereUniqueWithoutJogoInput | GolUpdateWithWhereUniqueWithoutJogoInput[]
    updateMany?: GolUpdateManyWithWhereWithoutJogoInput | GolUpdateManyWithWhereWithoutJogoInput[]
    deleteMany?: GolScalarWhereInput | GolScalarWhereInput[]
  }

  export type JogadorCreateNestedOneWithoutGolsInput = {
    create?: XOR<JogadorCreateWithoutGolsInput, JogadorUncheckedCreateWithoutGolsInput>
    connectOrCreate?: JogadorCreateOrConnectWithoutGolsInput
    connect?: JogadorWhereUniqueInput
  }

  export type JogoCreateNestedOneWithoutGolsInput = {
    create?: XOR<JogoCreateWithoutGolsInput, JogoUncheckedCreateWithoutGolsInput>
    connectOrCreate?: JogoCreateOrConnectWithoutGolsInput
    connect?: JogoWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JogadorUpdateOneRequiredWithoutGolsNestedInput = {
    create?: XOR<JogadorCreateWithoutGolsInput, JogadorUncheckedCreateWithoutGolsInput>
    connectOrCreate?: JogadorCreateOrConnectWithoutGolsInput
    upsert?: JogadorUpsertWithoutGolsInput
    connect?: JogadorWhereUniqueInput
    update?: XOR<XOR<JogadorUpdateToOneWithWhereWithoutGolsInput, JogadorUpdateWithoutGolsInput>, JogadorUncheckedUpdateWithoutGolsInput>
  }

  export type JogoUpdateOneRequiredWithoutGolsNestedInput = {
    create?: XOR<JogoCreateWithoutGolsInput, JogoUncheckedCreateWithoutGolsInput>
    connectOrCreate?: JogoCreateOrConnectWithoutGolsInput
    upsert?: JogoUpsertWithoutGolsInput
    connect?: JogoWhereUniqueInput
    update?: XOR<XOR<JogoUpdateToOneWithWhereWithoutGolsInput, JogoUpdateWithoutGolsInput>, JogoUncheckedUpdateWithoutGolsInput>
  }

  export type LogAdminCreateNestedManyWithoutAdminInput = {
    create?: XOR<LogAdminCreateWithoutAdminInput, LogAdminUncheckedCreateWithoutAdminInput> | LogAdminCreateWithoutAdminInput[] | LogAdminUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: LogAdminCreateOrConnectWithoutAdminInput | LogAdminCreateOrConnectWithoutAdminInput[]
    createMany?: LogAdminCreateManyAdminInputEnvelope
    connect?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
  }

  export type LogAdminUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<LogAdminCreateWithoutAdminInput, LogAdminUncheckedCreateWithoutAdminInput> | LogAdminCreateWithoutAdminInput[] | LogAdminUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: LogAdminCreateOrConnectWithoutAdminInput | LogAdminCreateOrConnectWithoutAdminInput[]
    createMany?: LogAdminCreateManyAdminInputEnvelope
    connect?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
  }

  export type LogAdminUpdateManyWithoutAdminNestedInput = {
    create?: XOR<LogAdminCreateWithoutAdminInput, LogAdminUncheckedCreateWithoutAdminInput> | LogAdminCreateWithoutAdminInput[] | LogAdminUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: LogAdminCreateOrConnectWithoutAdminInput | LogAdminCreateOrConnectWithoutAdminInput[]
    upsert?: LogAdminUpsertWithWhereUniqueWithoutAdminInput | LogAdminUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: LogAdminCreateManyAdminInputEnvelope
    set?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    disconnect?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    delete?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    connect?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    update?: LogAdminUpdateWithWhereUniqueWithoutAdminInput | LogAdminUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: LogAdminUpdateManyWithWhereWithoutAdminInput | LogAdminUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: LogAdminScalarWhereInput | LogAdminScalarWhereInput[]
  }

  export type LogAdminUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<LogAdminCreateWithoutAdminInput, LogAdminUncheckedCreateWithoutAdminInput> | LogAdminCreateWithoutAdminInput[] | LogAdminUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: LogAdminCreateOrConnectWithoutAdminInput | LogAdminCreateOrConnectWithoutAdminInput[]
    upsert?: LogAdminUpsertWithWhereUniqueWithoutAdminInput | LogAdminUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: LogAdminCreateManyAdminInputEnvelope
    set?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    disconnect?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    delete?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    connect?: LogAdminWhereUniqueInput | LogAdminWhereUniqueInput[]
    update?: LogAdminUpdateWithWhereUniqueWithoutAdminInput | LogAdminUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: LogAdminUpdateManyWithWhereWithoutAdminInput | LogAdminUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: LogAdminScalarWhereInput | LogAdminScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutLogAdminInput = {
    create?: XOR<AdminCreateWithoutLogAdminInput, AdminUncheckedCreateWithoutLogAdminInput>
    connectOrCreate?: AdminCreateOrConnectWithoutLogAdminInput
    connect?: AdminWhereUniqueInput
  }

  export type AdminUpdateOneRequiredWithoutLogAdminNestedInput = {
    create?: XOR<AdminCreateWithoutLogAdminInput, AdminUncheckedCreateWithoutLogAdminInput>
    connectOrCreate?: AdminCreateOrConnectWithoutLogAdminInput
    upsert?: AdminUpsertWithoutLogAdminInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutLogAdminInput, AdminUpdateWithoutLogAdminInput>, AdminUncheckedUpdateWithoutLogAdminInput>
  }

  export type InscricaoJogadorCreateNestedManyWithoutInscricaoEquipeInput = {
    create?: XOR<InscricaoJogadorCreateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput> | InscricaoJogadorCreateWithoutInscricaoEquipeInput[] | InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput[]
    connectOrCreate?: InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput | InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput[]
    createMany?: InscricaoJogadorCreateManyInscricaoEquipeInputEnvelope
    connect?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
  }

  export type InscricaoJogadorUncheckedCreateNestedManyWithoutInscricaoEquipeInput = {
    create?: XOR<InscricaoJogadorCreateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput> | InscricaoJogadorCreateWithoutInscricaoEquipeInput[] | InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput[]
    connectOrCreate?: InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput | InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput[]
    createMany?: InscricaoJogadorCreateManyInscricaoEquipeInputEnvelope
    connect?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
  }

  export type EnumStatusInscricaoFieldUpdateOperationsInput = {
    set?: $Enums.StatusInscricao
  }

  export type InscricaoJogadorUpdateManyWithoutInscricaoEquipeNestedInput = {
    create?: XOR<InscricaoJogadorCreateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput> | InscricaoJogadorCreateWithoutInscricaoEquipeInput[] | InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput[]
    connectOrCreate?: InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput | InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput[]
    upsert?: InscricaoJogadorUpsertWithWhereUniqueWithoutInscricaoEquipeInput | InscricaoJogadorUpsertWithWhereUniqueWithoutInscricaoEquipeInput[]
    createMany?: InscricaoJogadorCreateManyInscricaoEquipeInputEnvelope
    set?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    disconnect?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    delete?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    connect?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    update?: InscricaoJogadorUpdateWithWhereUniqueWithoutInscricaoEquipeInput | InscricaoJogadorUpdateWithWhereUniqueWithoutInscricaoEquipeInput[]
    updateMany?: InscricaoJogadorUpdateManyWithWhereWithoutInscricaoEquipeInput | InscricaoJogadorUpdateManyWithWhereWithoutInscricaoEquipeInput[]
    deleteMany?: InscricaoJogadorScalarWhereInput | InscricaoJogadorScalarWhereInput[]
  }

  export type InscricaoJogadorUncheckedUpdateManyWithoutInscricaoEquipeNestedInput = {
    create?: XOR<InscricaoJogadorCreateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput> | InscricaoJogadorCreateWithoutInscricaoEquipeInput[] | InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput[]
    connectOrCreate?: InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput | InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput[]
    upsert?: InscricaoJogadorUpsertWithWhereUniqueWithoutInscricaoEquipeInput | InscricaoJogadorUpsertWithWhereUniqueWithoutInscricaoEquipeInput[]
    createMany?: InscricaoJogadorCreateManyInscricaoEquipeInputEnvelope
    set?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    disconnect?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    delete?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    connect?: InscricaoJogadorWhereUniqueInput | InscricaoJogadorWhereUniqueInput[]
    update?: InscricaoJogadorUpdateWithWhereUniqueWithoutInscricaoEquipeInput | InscricaoJogadorUpdateWithWhereUniqueWithoutInscricaoEquipeInput[]
    updateMany?: InscricaoJogadorUpdateManyWithWhereWithoutInscricaoEquipeInput | InscricaoJogadorUpdateManyWithWhereWithoutInscricaoEquipeInput[]
    deleteMany?: InscricaoJogadorScalarWhereInput | InscricaoJogadorScalarWhereInput[]
  }

  export type InscricaoEquipeCreateNestedOneWithoutJogadoresInput = {
    create?: XOR<InscricaoEquipeCreateWithoutJogadoresInput, InscricaoEquipeUncheckedCreateWithoutJogadoresInput>
    connectOrCreate?: InscricaoEquipeCreateOrConnectWithoutJogadoresInput
    connect?: InscricaoEquipeWhereUniqueInput
  }

  export type InscricaoEquipeUpdateOneRequiredWithoutJogadoresNestedInput = {
    create?: XOR<InscricaoEquipeCreateWithoutJogadoresInput, InscricaoEquipeUncheckedCreateWithoutJogadoresInput>
    connectOrCreate?: InscricaoEquipeCreateOrConnectWithoutJogadoresInput
    upsert?: InscricaoEquipeUpsertWithoutJogadoresInput
    connect?: InscricaoEquipeWhereUniqueInput
    update?: XOR<XOR<InscricaoEquipeUpdateToOneWithWhereWithoutJogadoresInput, InscricaoEquipeUpdateWithoutJogadoresInput>, InscricaoEquipeUncheckedUpdateWithoutJogadoresInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusJogoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusJogo | EnumStatusJogoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusJogoFilter<$PrismaModel> | $Enums.StatusJogo
  }

  export type NestedEnumStatusJogoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusJogo | EnumStatusJogoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusJogo[] | ListEnumStatusJogoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusJogoWithAggregatesFilter<$PrismaModel> | $Enums.StatusJogo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusJogoFilter<$PrismaModel>
    _max?: NestedEnumStatusJogoFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusInscricaoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusInscricao | EnumStatusInscricaoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusInscricaoFilter<$PrismaModel> | $Enums.StatusInscricao
  }

  export type NestedEnumStatusInscricaoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusInscricao | EnumStatusInscricaoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusInscricao[] | ListEnumStatusInscricaoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusInscricaoWithAggregatesFilter<$PrismaModel> | $Enums.StatusInscricao
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusInscricaoFilter<$PrismaModel>
    _max?: NestedEnumStatusInscricaoFilter<$PrismaModel>
  }

  export type JogadorCreateWithoutEquipeInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gols?: GolCreateNestedManyWithoutJogadorInput
  }

  export type JogadorUncheckedCreateWithoutEquipeInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gols?: GolUncheckedCreateNestedManyWithoutJogadorInput
  }

  export type JogadorCreateOrConnectWithoutEquipeInput = {
    where: JogadorWhereUniqueInput
    create: XOR<JogadorCreateWithoutEquipeInput, JogadorUncheckedCreateWithoutEquipeInput>
  }

  export type JogadorCreateManyEquipeInputEnvelope = {
    data: JogadorCreateManyEquipeInput | JogadorCreateManyEquipeInput[]
    skipDuplicates?: boolean
  }

  export type JogoCreateWithoutEquipeCasaInput = {
    id?: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    equipeFora: EquipeCreateNestedOneWithoutJogosForaInput
    gols?: GolCreateNestedManyWithoutJogoInput
  }

  export type JogoUncheckedCreateWithoutEquipeCasaInput = {
    id?: string
    equipeForaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    gols?: GolUncheckedCreateNestedManyWithoutJogoInput
  }

  export type JogoCreateOrConnectWithoutEquipeCasaInput = {
    where: JogoWhereUniqueInput
    create: XOR<JogoCreateWithoutEquipeCasaInput, JogoUncheckedCreateWithoutEquipeCasaInput>
  }

  export type JogoCreateManyEquipeCasaInputEnvelope = {
    data: JogoCreateManyEquipeCasaInput | JogoCreateManyEquipeCasaInput[]
    skipDuplicates?: boolean
  }

  export type JogoCreateWithoutEquipeForaInput = {
    id?: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    equipeCasa: EquipeCreateNestedOneWithoutJogosCasaInput
    gols?: GolCreateNestedManyWithoutJogoInput
  }

  export type JogoUncheckedCreateWithoutEquipeForaInput = {
    id?: string
    equipeCasaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    gols?: GolUncheckedCreateNestedManyWithoutJogoInput
  }

  export type JogoCreateOrConnectWithoutEquipeForaInput = {
    where: JogoWhereUniqueInput
    create: XOR<JogoCreateWithoutEquipeForaInput, JogoUncheckedCreateWithoutEquipeForaInput>
  }

  export type JogoCreateManyEquipeForaInputEnvelope = {
    data: JogoCreateManyEquipeForaInput | JogoCreateManyEquipeForaInput[]
    skipDuplicates?: boolean
  }

  export type JogadorUpsertWithWhereUniqueWithoutEquipeInput = {
    where: JogadorWhereUniqueInput
    update: XOR<JogadorUpdateWithoutEquipeInput, JogadorUncheckedUpdateWithoutEquipeInput>
    create: XOR<JogadorCreateWithoutEquipeInput, JogadorUncheckedCreateWithoutEquipeInput>
  }

  export type JogadorUpdateWithWhereUniqueWithoutEquipeInput = {
    where: JogadorWhereUniqueInput
    data: XOR<JogadorUpdateWithoutEquipeInput, JogadorUncheckedUpdateWithoutEquipeInput>
  }

  export type JogadorUpdateManyWithWhereWithoutEquipeInput = {
    where: JogadorScalarWhereInput
    data: XOR<JogadorUpdateManyMutationInput, JogadorUncheckedUpdateManyWithoutEquipeInput>
  }

  export type JogadorScalarWhereInput = {
    AND?: JogadorScalarWhereInput | JogadorScalarWhereInput[]
    OR?: JogadorScalarWhereInput[]
    NOT?: JogadorScalarWhereInput | JogadorScalarWhereInput[]
    id?: StringFilter<"Jogador"> | string
    nome?: StringFilter<"Jogador"> | string
    posicao?: StringFilter<"Jogador"> | string
    numero?: IntFilter<"Jogador"> | number
    fotoUrl?: StringNullableFilter<"Jogador"> | string | null
    equipeId?: StringFilter<"Jogador"> | string
    createdAt?: DateTimeFilter<"Jogador"> | Date | string
    updatedAt?: DateTimeFilter<"Jogador"> | Date | string
  }

  export type JogoUpsertWithWhereUniqueWithoutEquipeCasaInput = {
    where: JogoWhereUniqueInput
    update: XOR<JogoUpdateWithoutEquipeCasaInput, JogoUncheckedUpdateWithoutEquipeCasaInput>
    create: XOR<JogoCreateWithoutEquipeCasaInput, JogoUncheckedCreateWithoutEquipeCasaInput>
  }

  export type JogoUpdateWithWhereUniqueWithoutEquipeCasaInput = {
    where: JogoWhereUniqueInput
    data: XOR<JogoUpdateWithoutEquipeCasaInput, JogoUncheckedUpdateWithoutEquipeCasaInput>
  }

  export type JogoUpdateManyWithWhereWithoutEquipeCasaInput = {
    where: JogoScalarWhereInput
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyWithoutEquipeCasaInput>
  }

  export type JogoScalarWhereInput = {
    AND?: JogoScalarWhereInput | JogoScalarWhereInput[]
    OR?: JogoScalarWhereInput[]
    NOT?: JogoScalarWhereInput | JogoScalarWhereInput[]
    id?: StringFilter<"Jogo"> | string
    equipeCasaId?: StringFilter<"Jogo"> | string
    equipeForaId?: StringFilter<"Jogo"> | string
    golsCasa?: IntFilter<"Jogo"> | number
    golsFora?: IntFilter<"Jogo"> | number
    data?: DateTimeFilter<"Jogo"> | Date | string
    local?: StringFilter<"Jogo"> | string
    status?: EnumStatusJogoFilter<"Jogo"> | $Enums.StatusJogo
    createdAt?: DateTimeFilter<"Jogo"> | Date | string
    updatedAt?: DateTimeFilter<"Jogo"> | Date | string
  }

  export type JogoUpsertWithWhereUniqueWithoutEquipeForaInput = {
    where: JogoWhereUniqueInput
    update: XOR<JogoUpdateWithoutEquipeForaInput, JogoUncheckedUpdateWithoutEquipeForaInput>
    create: XOR<JogoCreateWithoutEquipeForaInput, JogoUncheckedCreateWithoutEquipeForaInput>
  }

  export type JogoUpdateWithWhereUniqueWithoutEquipeForaInput = {
    where: JogoWhereUniqueInput
    data: XOR<JogoUpdateWithoutEquipeForaInput, JogoUncheckedUpdateWithoutEquipeForaInput>
  }

  export type JogoUpdateManyWithWhereWithoutEquipeForaInput = {
    where: JogoScalarWhereInput
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyWithoutEquipeForaInput>
  }

  export type EquipeCreateWithoutJogadoresInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogosCasa?: JogoCreateNestedManyWithoutEquipeCasaInput
    jogosFora?: JogoCreateNestedManyWithoutEquipeForaInput
  }

  export type EquipeUncheckedCreateWithoutJogadoresInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogosCasa?: JogoUncheckedCreateNestedManyWithoutEquipeCasaInput
    jogosFora?: JogoUncheckedCreateNestedManyWithoutEquipeForaInput
  }

  export type EquipeCreateOrConnectWithoutJogadoresInput = {
    where: EquipeWhereUniqueInput
    create: XOR<EquipeCreateWithoutJogadoresInput, EquipeUncheckedCreateWithoutJogadoresInput>
  }

  export type GolCreateWithoutJogadorInput = {
    id?: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jogo: JogoCreateNestedOneWithoutGolsInput
  }

  export type GolUncheckedCreateWithoutJogadorInput = {
    id?: string
    jogoId: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GolCreateOrConnectWithoutJogadorInput = {
    where: GolWhereUniqueInput
    create: XOR<GolCreateWithoutJogadorInput, GolUncheckedCreateWithoutJogadorInput>
  }

  export type GolCreateManyJogadorInputEnvelope = {
    data: GolCreateManyJogadorInput | GolCreateManyJogadorInput[]
    skipDuplicates?: boolean
  }

  export type EquipeUpsertWithoutJogadoresInput = {
    update: XOR<EquipeUpdateWithoutJogadoresInput, EquipeUncheckedUpdateWithoutJogadoresInput>
    create: XOR<EquipeCreateWithoutJogadoresInput, EquipeUncheckedCreateWithoutJogadoresInput>
    where?: EquipeWhereInput
  }

  export type EquipeUpdateToOneWithWhereWithoutJogadoresInput = {
    where?: EquipeWhereInput
    data: XOR<EquipeUpdateWithoutJogadoresInput, EquipeUncheckedUpdateWithoutJogadoresInput>
  }

  export type EquipeUpdateWithoutJogadoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogosCasa?: JogoUpdateManyWithoutEquipeCasaNestedInput
    jogosFora?: JogoUpdateManyWithoutEquipeForaNestedInput
  }

  export type EquipeUncheckedUpdateWithoutJogadoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogosCasa?: JogoUncheckedUpdateManyWithoutEquipeCasaNestedInput
    jogosFora?: JogoUncheckedUpdateManyWithoutEquipeForaNestedInput
  }

  export type GolUpsertWithWhereUniqueWithoutJogadorInput = {
    where: GolWhereUniqueInput
    update: XOR<GolUpdateWithoutJogadorInput, GolUncheckedUpdateWithoutJogadorInput>
    create: XOR<GolCreateWithoutJogadorInput, GolUncheckedCreateWithoutJogadorInput>
  }

  export type GolUpdateWithWhereUniqueWithoutJogadorInput = {
    where: GolWhereUniqueInput
    data: XOR<GolUpdateWithoutJogadorInput, GolUncheckedUpdateWithoutJogadorInput>
  }

  export type GolUpdateManyWithWhereWithoutJogadorInput = {
    where: GolScalarWhereInput
    data: XOR<GolUpdateManyMutationInput, GolUncheckedUpdateManyWithoutJogadorInput>
  }

  export type GolScalarWhereInput = {
    AND?: GolScalarWhereInput | GolScalarWhereInput[]
    OR?: GolScalarWhereInput[]
    NOT?: GolScalarWhereInput | GolScalarWhereInput[]
    id?: StringFilter<"Gol"> | string
    jogadorId?: StringFilter<"Gol"> | string
    jogoId?: StringFilter<"Gol"> | string
    minuto?: IntNullableFilter<"Gol"> | number | null
    createdAt?: DateTimeFilter<"Gol"> | Date | string
    updatedAt?: DateTimeFilter<"Gol"> | Date | string
  }

  export type EquipeCreateWithoutJogosCasaInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: JogadorCreateNestedManyWithoutEquipeInput
    jogosFora?: JogoCreateNestedManyWithoutEquipeForaInput
  }

  export type EquipeUncheckedCreateWithoutJogosCasaInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: JogadorUncheckedCreateNestedManyWithoutEquipeInput
    jogosFora?: JogoUncheckedCreateNestedManyWithoutEquipeForaInput
  }

  export type EquipeCreateOrConnectWithoutJogosCasaInput = {
    where: EquipeWhereUniqueInput
    create: XOR<EquipeCreateWithoutJogosCasaInput, EquipeUncheckedCreateWithoutJogosCasaInput>
  }

  export type EquipeCreateWithoutJogosForaInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: JogadorCreateNestedManyWithoutEquipeInput
    jogosCasa?: JogoCreateNestedManyWithoutEquipeCasaInput
  }

  export type EquipeUncheckedCreateWithoutJogosForaInput = {
    id?: string
    nome: string
    slug: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jogadores?: JogadorUncheckedCreateNestedManyWithoutEquipeInput
    jogosCasa?: JogoUncheckedCreateNestedManyWithoutEquipeCasaInput
  }

  export type EquipeCreateOrConnectWithoutJogosForaInput = {
    where: EquipeWhereUniqueInput
    create: XOR<EquipeCreateWithoutJogosForaInput, EquipeUncheckedCreateWithoutJogosForaInput>
  }

  export type GolCreateWithoutJogoInput = {
    id?: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jogador: JogadorCreateNestedOneWithoutGolsInput
  }

  export type GolUncheckedCreateWithoutJogoInput = {
    id?: string
    jogadorId: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GolCreateOrConnectWithoutJogoInput = {
    where: GolWhereUniqueInput
    create: XOR<GolCreateWithoutJogoInput, GolUncheckedCreateWithoutJogoInput>
  }

  export type GolCreateManyJogoInputEnvelope = {
    data: GolCreateManyJogoInput | GolCreateManyJogoInput[]
    skipDuplicates?: boolean
  }

  export type EquipeUpsertWithoutJogosCasaInput = {
    update: XOR<EquipeUpdateWithoutJogosCasaInput, EquipeUncheckedUpdateWithoutJogosCasaInput>
    create: XOR<EquipeCreateWithoutJogosCasaInput, EquipeUncheckedCreateWithoutJogosCasaInput>
    where?: EquipeWhereInput
  }

  export type EquipeUpdateToOneWithWhereWithoutJogosCasaInput = {
    where?: EquipeWhereInput
    data: XOR<EquipeUpdateWithoutJogosCasaInput, EquipeUncheckedUpdateWithoutJogosCasaInput>
  }

  export type EquipeUpdateWithoutJogosCasaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: JogadorUpdateManyWithoutEquipeNestedInput
    jogosFora?: JogoUpdateManyWithoutEquipeForaNestedInput
  }

  export type EquipeUncheckedUpdateWithoutJogosCasaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: JogadorUncheckedUpdateManyWithoutEquipeNestedInput
    jogosFora?: JogoUncheckedUpdateManyWithoutEquipeForaNestedInput
  }

  export type EquipeUpsertWithoutJogosForaInput = {
    update: XOR<EquipeUpdateWithoutJogosForaInput, EquipeUncheckedUpdateWithoutJogosForaInput>
    create: XOR<EquipeCreateWithoutJogosForaInput, EquipeUncheckedCreateWithoutJogosForaInput>
    where?: EquipeWhereInput
  }

  export type EquipeUpdateToOneWithWhereWithoutJogosForaInput = {
    where?: EquipeWhereInput
    data: XOR<EquipeUpdateWithoutJogosForaInput, EquipeUncheckedUpdateWithoutJogosForaInput>
  }

  export type EquipeUpdateWithoutJogosForaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: JogadorUpdateManyWithoutEquipeNestedInput
    jogosCasa?: JogoUpdateManyWithoutEquipeCasaNestedInput
  }

  export type EquipeUncheckedUpdateWithoutJogosForaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogadores?: JogadorUncheckedUpdateManyWithoutEquipeNestedInput
    jogosCasa?: JogoUncheckedUpdateManyWithoutEquipeCasaNestedInput
  }

  export type GolUpsertWithWhereUniqueWithoutJogoInput = {
    where: GolWhereUniqueInput
    update: XOR<GolUpdateWithoutJogoInput, GolUncheckedUpdateWithoutJogoInput>
    create: XOR<GolCreateWithoutJogoInput, GolUncheckedCreateWithoutJogoInput>
  }

  export type GolUpdateWithWhereUniqueWithoutJogoInput = {
    where: GolWhereUniqueInput
    data: XOR<GolUpdateWithoutJogoInput, GolUncheckedUpdateWithoutJogoInput>
  }

  export type GolUpdateManyWithWhereWithoutJogoInput = {
    where: GolScalarWhereInput
    data: XOR<GolUpdateManyMutationInput, GolUncheckedUpdateManyWithoutJogoInput>
  }

  export type JogadorCreateWithoutGolsInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    equipe: EquipeCreateNestedOneWithoutJogadoresInput
  }

  export type JogadorUncheckedCreateWithoutGolsInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    equipeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogadorCreateOrConnectWithoutGolsInput = {
    where: JogadorWhereUniqueInput
    create: XOR<JogadorCreateWithoutGolsInput, JogadorUncheckedCreateWithoutGolsInput>
  }

  export type JogoCreateWithoutGolsInput = {
    id?: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
    equipeCasa: EquipeCreateNestedOneWithoutJogosCasaInput
    equipeFora: EquipeCreateNestedOneWithoutJogosForaInput
  }

  export type JogoUncheckedCreateWithoutGolsInput = {
    id?: string
    equipeCasaId: string
    equipeForaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoCreateOrConnectWithoutGolsInput = {
    where: JogoWhereUniqueInput
    create: XOR<JogoCreateWithoutGolsInput, JogoUncheckedCreateWithoutGolsInput>
  }

  export type JogadorUpsertWithoutGolsInput = {
    update: XOR<JogadorUpdateWithoutGolsInput, JogadorUncheckedUpdateWithoutGolsInput>
    create: XOR<JogadorCreateWithoutGolsInput, JogadorUncheckedCreateWithoutGolsInput>
    where?: JogadorWhereInput
  }

  export type JogadorUpdateToOneWithWhereWithoutGolsInput = {
    where?: JogadorWhereInput
    data: XOR<JogadorUpdateWithoutGolsInput, JogadorUncheckedUpdateWithoutGolsInput>
  }

  export type JogadorUpdateWithoutGolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipe?: EquipeUpdateOneRequiredWithoutJogadoresNestedInput
  }

  export type JogadorUncheckedUpdateWithoutGolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    equipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUpsertWithoutGolsInput = {
    update: XOR<JogoUpdateWithoutGolsInput, JogoUncheckedUpdateWithoutGolsInput>
    create: XOR<JogoCreateWithoutGolsInput, JogoUncheckedCreateWithoutGolsInput>
    where?: JogoWhereInput
  }

  export type JogoUpdateToOneWithWhereWithoutGolsInput = {
    where?: JogoWhereInput
    data: XOR<JogoUpdateWithoutGolsInput, JogoUncheckedUpdateWithoutGolsInput>
  }

  export type JogoUpdateWithoutGolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipeCasa?: EquipeUpdateOneRequiredWithoutJogosCasaNestedInput
    equipeFora?: EquipeUpdateOneRequiredWithoutJogosForaNestedInput
  }

  export type JogoUncheckedUpdateWithoutGolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeCasaId?: StringFieldUpdateOperationsInput | string
    equipeForaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminCreateWithoutAdminInput = {
    id?: string
    acao: string
    data?: Date | string
    updatedAt?: Date | string
  }

  export type LogAdminUncheckedCreateWithoutAdminInput = {
    id?: string
    acao: string
    data?: Date | string
    updatedAt?: Date | string
  }

  export type LogAdminCreateOrConnectWithoutAdminInput = {
    where: LogAdminWhereUniqueInput
    create: XOR<LogAdminCreateWithoutAdminInput, LogAdminUncheckedCreateWithoutAdminInput>
  }

  export type LogAdminCreateManyAdminInputEnvelope = {
    data: LogAdminCreateManyAdminInput | LogAdminCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type LogAdminUpsertWithWhereUniqueWithoutAdminInput = {
    where: LogAdminWhereUniqueInput
    update: XOR<LogAdminUpdateWithoutAdminInput, LogAdminUncheckedUpdateWithoutAdminInput>
    create: XOR<LogAdminCreateWithoutAdminInput, LogAdminUncheckedCreateWithoutAdminInput>
  }

  export type LogAdminUpdateWithWhereUniqueWithoutAdminInput = {
    where: LogAdminWhereUniqueInput
    data: XOR<LogAdminUpdateWithoutAdminInput, LogAdminUncheckedUpdateWithoutAdminInput>
  }

  export type LogAdminUpdateManyWithWhereWithoutAdminInput = {
    where: LogAdminScalarWhereInput
    data: XOR<LogAdminUpdateManyMutationInput, LogAdminUncheckedUpdateManyWithoutAdminInput>
  }

  export type LogAdminScalarWhereInput = {
    AND?: LogAdminScalarWhereInput | LogAdminScalarWhereInput[]
    OR?: LogAdminScalarWhereInput[]
    NOT?: LogAdminScalarWhereInput | LogAdminScalarWhereInput[]
    id?: StringFilter<"LogAdmin"> | string
    adminId?: StringFilter<"LogAdmin"> | string
    acao?: StringFilter<"LogAdmin"> | string
    data?: DateTimeFilter<"LogAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"LogAdmin"> | Date | string
  }

  export type AdminCreateWithoutLogAdminInput = {
    id?: string
    email: string
    senha: string
    createdAt?: Date | string
  }

  export type AdminUncheckedCreateWithoutLogAdminInput = {
    id?: string
    email: string
    senha: string
    createdAt?: Date | string
  }

  export type AdminCreateOrConnectWithoutLogAdminInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutLogAdminInput, AdminUncheckedCreateWithoutLogAdminInput>
  }

  export type AdminUpsertWithoutLogAdminInput = {
    update: XOR<AdminUpdateWithoutLogAdminInput, AdminUncheckedUpdateWithoutLogAdminInput>
    create: XOR<AdminCreateWithoutLogAdminInput, AdminUncheckedCreateWithoutLogAdminInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutLogAdminInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutLogAdminInput, AdminUncheckedUpdateWithoutLogAdminInput>
  }

  export type AdminUpdateWithoutLogAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateWithoutLogAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorCreateWithoutInscricaoEquipeInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoJogadorCreateOrConnectWithoutInscricaoEquipeInput = {
    where: InscricaoJogadorWhereUniqueInput
    create: XOR<InscricaoJogadorCreateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput>
  }

  export type InscricaoJogadorCreateManyInscricaoEquipeInputEnvelope = {
    data: InscricaoJogadorCreateManyInscricaoEquipeInput | InscricaoJogadorCreateManyInscricaoEquipeInput[]
    skipDuplicates?: boolean
  }

  export type InscricaoJogadorUpsertWithWhereUniqueWithoutInscricaoEquipeInput = {
    where: InscricaoJogadorWhereUniqueInput
    update: XOR<InscricaoJogadorUpdateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedUpdateWithoutInscricaoEquipeInput>
    create: XOR<InscricaoJogadorCreateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedCreateWithoutInscricaoEquipeInput>
  }

  export type InscricaoJogadorUpdateWithWhereUniqueWithoutInscricaoEquipeInput = {
    where: InscricaoJogadorWhereUniqueInput
    data: XOR<InscricaoJogadorUpdateWithoutInscricaoEquipeInput, InscricaoJogadorUncheckedUpdateWithoutInscricaoEquipeInput>
  }

  export type InscricaoJogadorUpdateManyWithWhereWithoutInscricaoEquipeInput = {
    where: InscricaoJogadorScalarWhereInput
    data: XOR<InscricaoJogadorUpdateManyMutationInput, InscricaoJogadorUncheckedUpdateManyWithoutInscricaoEquipeInput>
  }

  export type InscricaoJogadorScalarWhereInput = {
    AND?: InscricaoJogadorScalarWhereInput | InscricaoJogadorScalarWhereInput[]
    OR?: InscricaoJogadorScalarWhereInput[]
    NOT?: InscricaoJogadorScalarWhereInput | InscricaoJogadorScalarWhereInput[]
    id?: StringFilter<"InscricaoJogador"> | string
    nome?: StringFilter<"InscricaoJogador"> | string
    posicao?: StringFilter<"InscricaoJogador"> | string
    numero?: IntFilter<"InscricaoJogador"> | number
    inscricaoEquipeId?: StringFilter<"InscricaoJogador"> | string
    createdAt?: DateTimeFilter<"InscricaoJogador"> | Date | string
    updatedAt?: DateTimeFilter<"InscricaoJogador"> | Date | string
  }

  export type InscricaoEquipeCreateWithoutJogadoresInput = {
    id?: string
    nome: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    status?: $Enums.StatusInscricao
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoEquipeUncheckedCreateWithoutJogadoresInput = {
    id?: string
    nome: string
    contato: string
    capitao: string
    aceiteRegulamento?: boolean
    status?: $Enums.StatusInscricao
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoEquipeCreateOrConnectWithoutJogadoresInput = {
    where: InscricaoEquipeWhereUniqueInput
    create: XOR<InscricaoEquipeCreateWithoutJogadoresInput, InscricaoEquipeUncheckedCreateWithoutJogadoresInput>
  }

  export type InscricaoEquipeUpsertWithoutJogadoresInput = {
    update: XOR<InscricaoEquipeUpdateWithoutJogadoresInput, InscricaoEquipeUncheckedUpdateWithoutJogadoresInput>
    create: XOR<InscricaoEquipeCreateWithoutJogadoresInput, InscricaoEquipeUncheckedCreateWithoutJogadoresInput>
    where?: InscricaoEquipeWhereInput
  }

  export type InscricaoEquipeUpdateToOneWithWhereWithoutJogadoresInput = {
    where?: InscricaoEquipeWhereInput
    data: XOR<InscricaoEquipeUpdateWithoutJogadoresInput, InscricaoEquipeUncheckedUpdateWithoutJogadoresInput>
  }

  export type InscricaoEquipeUpdateWithoutJogadoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusInscricaoFieldUpdateOperationsInput | $Enums.StatusInscricao
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoEquipeUncheckedUpdateWithoutJogadoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    capitao?: StringFieldUpdateOperationsInput | string
    aceiteRegulamento?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusInscricaoFieldUpdateOperationsInput | $Enums.StatusInscricao
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogadorCreateManyEquipeInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    fotoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoCreateManyEquipeCasaInput = {
    id?: string
    equipeForaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoCreateManyEquipeForaInput = {
    id?: string
    equipeCasaId: string
    golsCasa: number
    golsFora: number
    data: Date | string
    local: string
    status?: $Enums.StatusJogo
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogadorUpdateWithoutEquipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gols?: GolUpdateManyWithoutJogadorNestedInput
  }

  export type JogadorUncheckedUpdateWithoutEquipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gols?: GolUncheckedUpdateManyWithoutJogadorNestedInput
  }

  export type JogadorUncheckedUpdateManyWithoutEquipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUpdateWithoutEquipeCasaInput = {
    id?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipeFora?: EquipeUpdateOneRequiredWithoutJogosForaNestedInput
    gols?: GolUpdateManyWithoutJogoNestedInput
  }

  export type JogoUncheckedUpdateWithoutEquipeCasaInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeForaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gols?: GolUncheckedUpdateManyWithoutJogoNestedInput
  }

  export type JogoUncheckedUpdateManyWithoutEquipeCasaInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeForaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUpdateWithoutEquipeForaInput = {
    id?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipeCasa?: EquipeUpdateOneRequiredWithoutJogosCasaNestedInput
    gols?: GolUpdateManyWithoutJogoNestedInput
  }

  export type JogoUncheckedUpdateWithoutEquipeForaInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeCasaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gols?: GolUncheckedUpdateManyWithoutJogoNestedInput
  }

  export type JogoUncheckedUpdateManyWithoutEquipeForaInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipeCasaId?: StringFieldUpdateOperationsInput | string
    golsCasa?: IntFieldUpdateOperationsInput | number
    golsFora?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    local?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusJogoFieldUpdateOperationsInput | $Enums.StatusJogo
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolCreateManyJogadorInput = {
    id?: string
    jogoId: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GolUpdateWithoutJogadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogo?: JogoUpdateOneRequiredWithoutGolsNestedInput
  }

  export type GolUncheckedUpdateWithoutJogadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolUncheckedUpdateManyWithoutJogadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolCreateManyJogoInput = {
    id?: string
    jogadorId: string
    minuto?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GolUpdateWithoutJogoInput = {
    id?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jogador?: JogadorUpdateOneRequiredWithoutGolsNestedInput
  }

  export type GolUncheckedUpdateWithoutJogoInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogadorId?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GolUncheckedUpdateManyWithoutJogoInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogadorId?: StringFieldUpdateOperationsInput | string
    minuto?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminCreateManyAdminInput = {
    id?: string
    acao: string
    data?: Date | string
    updatedAt?: Date | string
  }

  export type LogAdminUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogAdminUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorCreateManyInscricaoEquipeInput = {
    id?: string
    nome: string
    posicao: string
    numero: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscricaoJogadorUpdateWithoutInscricaoEquipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorUncheckedUpdateWithoutInscricaoEquipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscricaoJogadorUncheckedUpdateManyWithoutInscricaoEquipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    posicao?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}